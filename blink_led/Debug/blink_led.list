
blink_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000204  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800039c  080003a4  000013a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800039c  0800039c  000013a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800039c  0800039c  000013a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800039c  080003a4  000013a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800039c  0800039c  0000139c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003a0  080003a0  000013a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003a4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003a4  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000013a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000001ac  00000000  00000000  000013ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000109  00000000  00000000  0000157a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000060  00000000  00000000  00001688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000003e  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001b3a  00000000  00000000  00001726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000078b  00000000  00000000  00003260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007706  00000000  00000000  000039eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000b0f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000d0  00000000  00000000  0000b134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000384 	.word	0x08000384

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000384 	.word	0x08000384

080001d8 <delay>:
#include <stdio.h>
#include "led.h"


void delay(uint32_t count)
{
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < count ; i++);
 80001e0:	2300      	movs	r3, #0
 80001e2:	60fb      	str	r3, [r7, #12]
 80001e4:	e002      	b.n	80001ec <delay+0x14>
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	3301      	adds	r3, #1
 80001ea:	60fb      	str	r3, [r7, #12]
 80001ec:	68fa      	ldr	r2, [r7, #12]
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	429a      	cmp	r2, r3
 80001f2:	d3f8      	bcc.n	80001e6 <delay+0xe>
}
 80001f4:	bf00      	nop
 80001f6:	bf00      	nop
 80001f8:	3714      	adds	r7, #20
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bc80      	pop	{r7}
 80001fe:	4770      	bx	lr

08000200 <led_on>:

void led_on(int x)
{
 8000200:	b480      	push	{r7}
 8000202:	b087      	sub	sp, #28
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	uint32_t *pRCC_AHB1ENR = (uint32_t*) (RCC_BASE_ADDRESS + RCC_AHB1ENR_OFFSET);
 8000208:	4b17      	ldr	r3, [pc, #92]	@ (8000268 <led_on+0x68>)
 800020a:	617b      	str	r3, [r7, #20]
	uint32_t *pGPIOA_MODER = (uint32_t*)(GPIOA_BASE_ADDRESS + GPIO_MODER_OFFSET );
 800020c:	4b17      	ldr	r3, [pc, #92]	@ (800026c <led_on+0x6c>)
 800020e:	613b      	str	r3, [r7, #16]
	uint32_t *pGPIOA_ODR = (uint32_t*)( GPIOA_BASE_ADDRESS + GPIO_ODR_OFFSET );
 8000210:	4b17      	ldr	r3, [pc, #92]	@ (8000270 <led_on+0x70>)
 8000212:	60fb      	str	r3, [r7, #12]
	uint32_t *pGPIOA_BSRR = (uint32_t*)( GPIOA_BASE_ADDRESS + GPIO_BSRR_OFFSET );
 8000214:	4b17      	ldr	r3, [pc, #92]	@ (8000274 <led_on+0x74>)
 8000216:	60bb      	str	r3, [r7, #8]

	*pRCC_AHB1ENR |= 1;
 8000218:	697b      	ldr	r3, [r7, #20]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	f043 0201 	orr.w	r2, r3, #1
 8000220:	697b      	ldr	r3, [r7, #20]
 8000222:	601a      	str	r2, [r3, #0]
	*pGPIOA_MODER |= (1 << (2*x));
 8000224:	693b      	ldr	r3, [r7, #16]
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	0052      	lsls	r2, r2, #1
 800022c:	2101      	movs	r1, #1
 800022e:	fa01 f202 	lsl.w	r2, r1, r2
 8000232:	431a      	orrs	r2, r3
 8000234:	693b      	ldr	r3, [r7, #16]
 8000236:	601a      	str	r2, [r3, #0]
	*pGPIOA_ODR |= ( (0x0000FFFF) & (1 << x ));
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	681a      	ldr	r2, [r3, #0]
 800023c:	2101      	movs	r1, #1
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	fa01 f303 	lsl.w	r3, r1, r3
 8000244:	b29b      	uxth	r3, r3
 8000246:	431a      	orrs	r2, r3
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	601a      	str	r2, [r3, #0]
	*pGPIOA_BSRR |= ( 1 << x );
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	2101      	movs	r1, #1
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	fa01 f202 	lsl.w	r2, r1, r2
 8000258:	431a      	orrs	r2, r3
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	601a      	str	r2, [r3, #0]
}
 800025e:	bf00      	nop
 8000260:	371c      	adds	r7, #28
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	40023830 	.word	0x40023830
 800026c:	40020000 	.word	0x40020000
 8000270:	40020014 	.word	0x40020014
 8000274:	40020018 	.word	0x40020018

08000278 <led_off>:

void led_off(int x)
{
 8000278:	b480      	push	{r7}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
	uint32_t *pGPIOA_ODR = (uint32_t*)( GPIOA_BASE_ADDRESS + GPIO_ODR_OFFSET );
 8000280:	4b0e      	ldr	r3, [pc, #56]	@ (80002bc <led_off+0x44>)
 8000282:	60fb      	str	r3, [r7, #12]
	uint32_t *pGPIOA_BSRR = (uint32_t*)( GPIOA_BASE_ADDRESS + GPIO_BSRR_OFFSET );
 8000284:	4b0e      	ldr	r3, [pc, #56]	@ (80002c0 <led_off+0x48>)
 8000286:	60bb      	str	r3, [r7, #8]
	*pGPIOA_ODR |= ( (0x0000FFFF) & (1 << x ));
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	2101      	movs	r1, #1
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	fa01 f303 	lsl.w	r3, r1, r3
 8000294:	b29b      	uxth	r3, r3
 8000296:	431a      	orrs	r2, r3
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	601a      	str	r2, [r3, #0]
	*pGPIOA_BSRR |= ( 1 << (x + 16));
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	687a      	ldr	r2, [r7, #4]
 80002a2:	3210      	adds	r2, #16
 80002a4:	2101      	movs	r1, #1
 80002a6:	fa01 f202 	lsl.w	r2, r1, r2
 80002aa:	431a      	orrs	r2, r3
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	601a      	str	r2, [r3, #0]
}
 80002b0:	bf00      	nop
 80002b2:	3714      	adds	r7, #20
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bc80      	pop	{r7}
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40020014 	.word	0x40020014
 80002c0:	40020018 	.word	0x40020018

080002c4 <main>:




int main(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(9);
 80002c8:	2009      	movs	r0, #9
 80002ca:	f7ff ff99 	bl	8000200 <led_on>
		delay(delay1MS * 500);
 80002ce:	4805      	ldr	r0, [pc, #20]	@ (80002e4 <main+0x20>)
 80002d0:	f7ff ff82 	bl	80001d8 <delay>
		led_off(9);
 80002d4:	2009      	movs	r0, #9
 80002d6:	f7ff ffcf 	bl	8000278 <led_off>
		delay(delay1MS * 500);
 80002da:	4802      	ldr	r0, [pc, #8]	@ (80002e4 <main+0x20>)
 80002dc:	f7ff ff7c 	bl	80001d8 <delay>
		led_on(9);
 80002e0:	bf00      	nop
 80002e2:	e7f1      	b.n	80002c8 <main+0x4>
 80002e4:	00098968 	.word	0x00098968

080002e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e8:	480d      	ldr	r0, [pc, #52]	@ (8000320 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f0:	480c      	ldr	r0, [pc, #48]	@ (8000324 <LoopForever+0x6>)
  ldr r1, =_edata
 80002f2:	490d      	ldr	r1, [pc, #52]	@ (8000328 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002f4:	4a0d      	ldr	r2, [pc, #52]	@ (800032c <LoopForever+0xe>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f8:	e002      	b.n	8000300 <LoopCopyDataInit>

080002fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002fe:	3304      	adds	r3, #4

08000300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000304:	d3f9      	bcc.n	80002fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000306:	4a0a      	ldr	r2, [pc, #40]	@ (8000330 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000308:	4c0a      	ldr	r4, [pc, #40]	@ (8000334 <LoopForever+0x16>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800030c:	e001      	b.n	8000312 <LoopFillZerobss>

0800030e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800030e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000310:	3204      	adds	r2, #4

08000312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000314:	d3fb      	bcc.n	800030e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000316:	f000 f811 	bl	800033c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800031a:	f7ff ffd3 	bl	80002c4 <main>

0800031e <LoopForever>:

LoopForever:
  b LoopForever
 800031e:	e7fe      	b.n	800031e <LoopForever>
  ldr   r0, =_estack
 8000320:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000328:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800032c:	080003a4 	.word	0x080003a4
  ldr r2, =_sbss
 8000330:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000334:	2000001c 	.word	0x2000001c

08000338 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000338:	e7fe      	b.n	8000338 <ADC_IRQHandler>
	...

0800033c <__libc_init_array>:
 800033c:	b570      	push	{r4, r5, r6, lr}
 800033e:	4d0d      	ldr	r5, [pc, #52]	@ (8000374 <__libc_init_array+0x38>)
 8000340:	4c0d      	ldr	r4, [pc, #52]	@ (8000378 <__libc_init_array+0x3c>)
 8000342:	1b64      	subs	r4, r4, r5
 8000344:	10a4      	asrs	r4, r4, #2
 8000346:	2600      	movs	r6, #0
 8000348:	42a6      	cmp	r6, r4
 800034a:	d109      	bne.n	8000360 <__libc_init_array+0x24>
 800034c:	4d0b      	ldr	r5, [pc, #44]	@ (800037c <__libc_init_array+0x40>)
 800034e:	4c0c      	ldr	r4, [pc, #48]	@ (8000380 <__libc_init_array+0x44>)
 8000350:	f000 f818 	bl	8000384 <_init>
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	10a4      	asrs	r4, r4, #2
 8000358:	2600      	movs	r6, #0
 800035a:	42a6      	cmp	r6, r4
 800035c:	d105      	bne.n	800036a <__libc_init_array+0x2e>
 800035e:	bd70      	pop	{r4, r5, r6, pc}
 8000360:	f855 3b04 	ldr.w	r3, [r5], #4
 8000364:	4798      	blx	r3
 8000366:	3601      	adds	r6, #1
 8000368:	e7ee      	b.n	8000348 <__libc_init_array+0xc>
 800036a:	f855 3b04 	ldr.w	r3, [r5], #4
 800036e:	4798      	blx	r3
 8000370:	3601      	adds	r6, #1
 8000372:	e7f2      	b.n	800035a <__libc_init_array+0x1e>
 8000374:	0800039c 	.word	0x0800039c
 8000378:	0800039c 	.word	0x0800039c
 800037c:	0800039c 	.word	0x0800039c
 8000380:	080003a0 	.word	0x080003a0

08000384 <_init>:
 8000384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000386:	bf00      	nop
 8000388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038a:	bc08      	pop	{r3}
 800038c:	469e      	mov	lr, r3
 800038e:	4770      	bx	lr

08000390 <_fini>:
 8000390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000392:	bf00      	nop
 8000394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000396:	bc08      	pop	{r3}
 8000398:	469e      	mov	lr, r3
 800039a:	4770      	bx	lr
