
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f6c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001104  08001104  00002104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001158  08001158  0000306c  2**0
                  CONTENTS
  4 .ARM          00000000  08001158  08001158  0000306c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001158  08001158  0000306c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001158  08001158  00002158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800115c  0800115c  0000215c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08001160  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000006c  080011cc  0000306c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  080011cc  000031ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000306c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000bfd  00000000  00000000  00003096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000407  00000000  00000000  00003c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b0  00000000  00000000  000040a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000131  00000000  00000000  00004250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d49  00000000  00000000  00004381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001a4e  00000000  00000000  000070ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009b99  00000000  00000000  00008b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000126b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c1c  00000000  00000000  000126f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00013310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000006c 	.word	0x2000006c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080010ec 	.word	0x080010ec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000070 	.word	0x20000070
 80001d4:	080010ec 	.word	0x080010ec

080001d8 <delay>:
#define delay1MS	1250U

void led_on(int x);
void led_off(int x);
void delay(uint32_t count)
{
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < count ; i++);
 80001e0:	2300      	movs	r3, #0
 80001e2:	60fb      	str	r3, [r7, #12]
 80001e4:	e002      	b.n	80001ec <delay+0x14>
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	3301      	adds	r3, #1
 80001ea:	60fb      	str	r3, [r7, #12]
 80001ec:	68fa      	ldr	r2, [r7, #12]
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	429a      	cmp	r2, r3
 80001f2:	d3f8      	bcc.n	80001e6 <delay+0xe>
}
 80001f4:	bf00      	nop
 80001f6:	bf00      	nop
 80001f8:	3714      	adds	r7, #20
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bc80      	pop	{r7}
 80001fe:	4770      	bx	lr

08000200 <main>:


int main(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	enable_processor_faults();
 8000204:	f000 f8be 	bl	8000384 <enable_processor_faults>
	init_scheduler_stack(SCHEDULER_STACK_START);
 8000208:	480d      	ldr	r0, [pc, #52]	@ (8000240 <main+0x40>)
 800020a:	f000 f911 	bl	8000430 <init_scheduler_stack>

	task_handlers[0] = (uint32_t)task1_handler;
 800020e:	4a0d      	ldr	r2, [pc, #52]	@ (8000244 <main+0x44>)
 8000210:	4b0d      	ldr	r3, [pc, #52]	@ (8000248 <main+0x48>)
 8000212:	601a      	str	r2, [r3, #0]
	task_handlers[1] = (uint32_t)task2_handler;
 8000214:	4a0d      	ldr	r2, [pc, #52]	@ (800024c <main+0x4c>)
 8000216:	4b0c      	ldr	r3, [pc, #48]	@ (8000248 <main+0x48>)
 8000218:	605a      	str	r2, [r3, #4]
	task_handlers[2] = (uint32_t)task3_handler;
 800021a:	4a0d      	ldr	r2, [pc, #52]	@ (8000250 <main+0x50>)
 800021c:	4b0a      	ldr	r3, [pc, #40]	@ (8000248 <main+0x48>)
 800021e:	609a      	str	r2, [r3, #8]
	task_handlers[3] = (uint32_t)task4_handler;
 8000220:	4a0c      	ldr	r2, [pc, #48]	@ (8000254 <main+0x54>)
 8000222:	4b09      	ldr	r3, [pc, #36]	@ (8000248 <main+0x48>)
 8000224:	60da      	str	r2, [r3, #12]

	init_tasks_stack();
 8000226:	f000 f909 	bl	800043c <init_tasks_stack>

    init_systick_timer(TICK_HZ);
 800022a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800022e:	f000 f8c7 	bl	80003c0 <init_systick_timer>

    switch_msp_to_psp();
 8000232:	f000 f959 	bl	80004e8 <switch_msp_to_psp>


    task1_handler();
 8000236:	f000 f867 	bl	8000308 <task1_handler>

	for(;;);
 800023a:	bf00      	nop
 800023c:	e7fd      	b.n	800023a <main+0x3a>
 800023e:	bf00      	nop
 8000240:	2001f000 	.word	0x2001f000
 8000244:	08000309 	.word	0x08000309
 8000248:	20000088 	.word	0x20000088
 800024c:	0800032d 	.word	0x0800032d
 8000250:	08000351 	.word	0x08000351
 8000254:	08000375 	.word	0x08000375

08000258 <led_on>:
}
void led_on(int x)
{
 8000258:	b480      	push	{r7}
 800025a:	b087      	sub	sp, #28
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	uint32_t *pGPIOA_MODER = (uint32_t*)(GPIOA_BASE_ADDRESS + GPIO_MODER_OFFSET );
 8000260:	4b13      	ldr	r3, [pc, #76]	@ (80002b0 <led_on+0x58>)
 8000262:	617b      	str	r3, [r7, #20]
	uint32_t *pGPIOA_ODR = (uint32_t*)( GPIOA_BASE_ADDRESS + GPIO_ODR_OFFSET );
 8000264:	4b13      	ldr	r3, [pc, #76]	@ (80002b4 <led_on+0x5c>)
 8000266:	613b      	str	r3, [r7, #16]
	uint32_t *pGPIOA_BSRR = (uint32_t*)( GPIOA_BASE_ADDRESS + GPIO_BSRR_OFFSET );
 8000268:	4b13      	ldr	r3, [pc, #76]	@ (80002b8 <led_on+0x60>)
 800026a:	60fb      	str	r3, [r7, #12]
	*pGPIOA_MODER |= (1 << (2*x));
 800026c:	697b      	ldr	r3, [r7, #20]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	687a      	ldr	r2, [r7, #4]
 8000272:	0052      	lsls	r2, r2, #1
 8000274:	2101      	movs	r1, #1
 8000276:	fa01 f202 	lsl.w	r2, r1, r2
 800027a:	431a      	orrs	r2, r3
 800027c:	697b      	ldr	r3, [r7, #20]
 800027e:	601a      	str	r2, [r3, #0]
	*pGPIOA_ODR |= ( (0x0000FFFF) & (1 << x ));
 8000280:	693b      	ldr	r3, [r7, #16]
 8000282:	681a      	ldr	r2, [r3, #0]
 8000284:	2101      	movs	r1, #1
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	fa01 f303 	lsl.w	r3, r1, r3
 800028c:	b29b      	uxth	r3, r3
 800028e:	431a      	orrs	r2, r3
 8000290:	693b      	ldr	r3, [r7, #16]
 8000292:	601a      	str	r2, [r3, #0]
	*pGPIOA_BSRR |= ( 1 << x);
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2101      	movs	r1, #1
 800029a:	687a      	ldr	r2, [r7, #4]
 800029c:	fa01 f202 	lsl.w	r2, r1, r2
 80002a0:	431a      	orrs	r2, r3
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	601a      	str	r2, [r3, #0]
}
 80002a6:	bf00      	nop
 80002a8:	371c      	adds	r7, #28
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr
 80002b0:	40020000 	.word	0x40020000
 80002b4:	40020014 	.word	0x40020014
 80002b8:	40020018 	.word	0x40020018

080002bc <led_off>:

void led_off(int x)
{
 80002bc:	b480      	push	{r7}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
	uint32_t *pGPIOA_ODR = (uint32_t*)( GPIOA_BASE_ADDRESS + GPIO_ODR_OFFSET );
 80002c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000300 <led_off+0x44>)
 80002c6:	60fb      	str	r3, [r7, #12]
	uint32_t *pGPIOA_BSRR = (uint32_t*)( GPIOA_BASE_ADDRESS + GPIO_BSRR_OFFSET );
 80002c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000304 <led_off+0x48>)
 80002ca:	60bb      	str	r3, [r7, #8]
	*pGPIOA_ODR |= ( (0x0000FFFF) & (1 << x ));
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	2101      	movs	r1, #1
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	fa01 f303 	lsl.w	r3, r1, r3
 80002d8:	b29b      	uxth	r3, r3
 80002da:	431a      	orrs	r2, r3
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	601a      	str	r2, [r3, #0]
	*pGPIOA_BSRR &= ~( 1 << x);
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2101      	movs	r1, #1
 80002e6:	687a      	ldr	r2, [r7, #4]
 80002e8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ec:	43d2      	mvns	r2, r2
 80002ee:	401a      	ands	r2, r3
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	601a      	str	r2, [r3, #0]
}
 80002f4:	bf00      	nop
 80002f6:	3714      	adds	r7, #20
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bc80      	pop	{r7}
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40020014 	.word	0x40020014
 8000304:	40020018 	.word	0x40020018

08000308 <task1_handler>:

void task1_handler(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(10);
 800030c:	200a      	movs	r0, #10
 800030e:	f7ff ffa3 	bl	8000258 <led_on>
		delay(delay1MS * 1000);
 8000312:	4805      	ldr	r0, [pc, #20]	@ (8000328 <task1_handler+0x20>)
 8000314:	f7ff ff60 	bl	80001d8 <delay>
		led_off(10);
 8000318:	200a      	movs	r0, #10
 800031a:	f7ff ffcf 	bl	80002bc <led_off>
		delay(delay1MS * 1000);
 800031e:	4802      	ldr	r0, [pc, #8]	@ (8000328 <task1_handler+0x20>)
 8000320:	f7ff ff5a 	bl	80001d8 <delay>
		led_on(10);
 8000324:	bf00      	nop
 8000326:	e7f1      	b.n	800030c <task1_handler+0x4>
 8000328:	001312d0 	.word	0x001312d0

0800032c <task2_handler>:
	}
}

void task2_handler(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(2);
 8000330:	2002      	movs	r0, #2
 8000332:	f7ff ff91 	bl	8000258 <led_on>
		delay(delay1MS * 500);
 8000336:	4805      	ldr	r0, [pc, #20]	@ (800034c <task2_handler+0x20>)
 8000338:	f7ff ff4e 	bl	80001d8 <delay>
		led_off(2);
 800033c:	2002      	movs	r0, #2
 800033e:	f7ff ffbd 	bl	80002bc <led_off>
		delay(delay1MS * 500);
 8000342:	4802      	ldr	r0, [pc, #8]	@ (800034c <task2_handler+0x20>)
 8000344:	f7ff ff48 	bl	80001d8 <delay>
		led_on(2);
 8000348:	bf00      	nop
 800034a:	e7f1      	b.n	8000330 <task2_handler+0x4>
 800034c:	00098968 	.word	0x00098968

08000350 <task3_handler>:
	}
}

void task3_handler(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(3);
 8000354:	2003      	movs	r0, #3
 8000356:	f7ff ff7f 	bl	8000258 <led_on>
		delay(delay1MS * 125);
 800035a:	4805      	ldr	r0, [pc, #20]	@ (8000370 <task3_handler+0x20>)
 800035c:	f7ff ff3c 	bl	80001d8 <delay>
		led_off(3);
 8000360:	2003      	movs	r0, #3
 8000362:	f7ff ffab 	bl	80002bc <led_off>
		delay(delay1MS * 125);
 8000366:	4802      	ldr	r0, [pc, #8]	@ (8000370 <task3_handler+0x20>)
 8000368:	f7ff ff36 	bl	80001d8 <delay>
		led_on(3);
 800036c:	bf00      	nop
 800036e:	e7f1      	b.n	8000354 <task3_handler+0x4>
 8000370:	0002625a 	.word	0x0002625a

08000374 <task4_handler>:
	}
}

void task4_handler(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task 4\n");
 8000378:	4801      	ldr	r0, [pc, #4]	@ (8000380 <task4_handler+0xc>)
 800037a:	f000 fb27 	bl	80009cc <puts>
 800037e:	e7fb      	b.n	8000378 <task4_handler+0x4>
 8000380:	08001104 	.word	0x08001104

08000384 <enable_processor_faults>:
	}
}
void enable_processor_faults(void)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
	//1. Enable all configurable exceptions like usage fault, mem manage fault, bus fault
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 800038a:	4b0c      	ldr	r3, [pc, #48]	@ (80003bc <enable_processor_faults+0x38>)
 800038c:	607b      	str	r3, [r7, #4]
	*pSHCSR |= (1 << 18);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17);
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 16);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	601a      	str	r2, [r3, #0]
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	e000ed24 	.word	0xe000ed24

080003c0 <init_systick_timer>:
void init_systick_timer(uint32_t tick_hz)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b087      	sub	sp, #28
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80003c8:	4b16      	ldr	r3, [pc, #88]	@ (8000424 <init_systick_timer+0x64>)
 80003ca:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80003cc:	4b16      	ldr	r3, [pc, #88]	@ (8000428 <init_systick_timer+0x68>)
 80003ce:	613b      	str	r3, [r7, #16]
	uint32_t count_value = ( (SYSTICK_TIM_CLK / tick_hz) - 1);
 80003d0:	4a16      	ldr	r2, [pc, #88]	@ (800042c <init_systick_timer+0x6c>)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80003d8:	3b01      	subs	r3, #1
 80003da:	60fb      	str	r3, [r7, #12]

	//Clear the value of SVR
	*pSRVR &= ~(0x00FFFFFF);
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	601a      	str	r2, [r3, #0]

	//load the value in to SVR
	*pSRVR |= count_value;
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	431a      	orrs	r2, r3
 80003f0:	697b      	ldr	r3, [r7, #20]
 80003f2:	601a      	str	r2, [r3, #0]

	//do some settings
	*pSCSR |= ( 1 << 1 ); //Enables SysTick exception
 80003f4:	693b      	ldr	r3, [r7, #16]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f043 0202 	orr.w	r2, r3, #2
 80003fc:	693b      	ldr	r3, [r7, #16]
 80003fe:	601a      	str	r2, [r3, #0]
	*pSCSR |= ( 1 << 2 ); //Indicates the clock source, processor clock source
 8000400:	693b      	ldr	r3, [r7, #16]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f043 0204 	orr.w	r2, r3, #4
 8000408:	693b      	ldr	r3, [r7, #16]
 800040a:	601a      	str	r2, [r3, #0]

	//enable systick timer
	*pSCSR |= ( 1 << 0 ); //Enable the counter
 800040c:	693b      	ldr	r3, [r7, #16]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f043 0201 	orr.w	r2, r3, #1
 8000414:	693b      	ldr	r3, [r7, #16]
 8000416:	601a      	str	r2, [r3, #0]
}
 8000418:	bf00      	nop
 800041a:	371c      	adds	r7, #28
 800041c:	46bd      	mov	sp, r7
 800041e:	bc80      	pop	{r7}
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	e000e014 	.word	0xe000e014
 8000428:	e000e010 	.word	0xe000e010
 800042c:	00f42400 	.word	0x00f42400

08000430 <init_scheduler_stack>:

__attribute__ ((naked))void init_scheduler_stack(uint32_t top_of_stack)
{
 8000430:	4603      	mov	r3, r0
	__asm volatile("MSR MSP, %0": : "r"(top_of_stack) : );
 8000432:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 8000436:	4770      	bx	lr
}
 8000438:	bf00      	nop
	...

0800043c <init_tasks_stack>:

void init_tasks_stack(void)
{
 800043c:	b480      	push	{r7}
 800043e:	b085      	sub	sp, #20
 8000440:	af00      	add	r7, sp, #0
	uint32_t *pPSP;

	for(int i = 0; i < MAX_TASKS; i++)
 8000442:	2300      	movs	r3, #0
 8000444:	60bb      	str	r3, [r7, #8]
 8000446:	e032      	b.n	80004ae <init_tasks_stack+0x72>
	{
		pPSP = (uint32_t*)psp_of_tasks[i];
 8000448:	4a1d      	ldr	r2, [pc, #116]	@ (80004c0 <init_tasks_stack+0x84>)
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000450:	60fb      	str	r3, [r7, #12]

		pPSP--;//XPSR
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	3b04      	subs	r3, #4
 8000456:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; //0x0100000
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800045e:	601a      	str	r2, [r3, #0]

		pPSP--;//PC
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	3b04      	subs	r3, #4
 8000464:	60fb      	str	r3, [r7, #12]
		*pPSP = task_handlers[i];
 8000466:	4a17      	ldr	r2, [pc, #92]	@ (80004c4 <init_tasks_stack+0x88>)
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	601a      	str	r2, [r3, #0]

		pPSP--;//LR
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	3b04      	subs	r3, #4
 8000476:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFDU;
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	f06f 0202 	mvn.w	r2, #2
 800047e:	601a      	str	r2, [r3, #0]

		for(int j = 0; j < 13; j++)
 8000480:	2300      	movs	r3, #0
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	e008      	b.n	8000498 <init_tasks_stack+0x5c>
		{
			pPSP--;
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	3b04      	subs	r3, #4
 800048a:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < 13; j++)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	3301      	adds	r3, #1
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	2b0c      	cmp	r3, #12
 800049c:	ddf3      	ble.n	8000486 <init_tasks_stack+0x4a>
		}

		psp_of_tasks[i] = (uint32_t)pPSP;
 800049e:	68fa      	ldr	r2, [r7, #12]
 80004a0:	4907      	ldr	r1, [pc, #28]	@ (80004c0 <init_tasks_stack+0x84>)
 80004a2:	68bb      	ldr	r3, [r7, #8]
 80004a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < MAX_TASKS; i++)
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	3301      	adds	r3, #1
 80004ac:	60bb      	str	r3, [r7, #8]
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	2b03      	cmp	r3, #3
 80004b2:	ddc9      	ble.n	8000448 <init_tasks_stack+0xc>
	}
}
 80004b4:	bf00      	nop
 80004b6:	bf00      	nop
 80004b8:	3714      	adds	r7, #20
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr
 80004c0:	20000000 	.word	0x20000000
 80004c4:	20000088 	.word	0x20000088

080004c8 <get_psp_value>:

uint32_t get_psp_value(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0

	return psp_of_tasks[current_task];
 80004cc:	4b04      	ldr	r3, [pc, #16]	@ (80004e0 <get_psp_value+0x18>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	461a      	mov	r2, r3
 80004d2:	4b04      	ldr	r3, [pc, #16]	@ (80004e4 <get_psp_value+0x1c>)
 80004d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80004d8:	4618      	mov	r0, r3
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr
 80004e0:	20000098 	.word	0x20000098
 80004e4:	20000000 	.word	0x20000000

080004e8 <switch_msp_to_psp>:
__attribute__((naked))void switch_msp_to_psp(void)
{
	//1. initialize the PSP with TASK1 stack start

	//get the value of psp of current_task
	__asm volatile ("PUSH {LR}"); //preserve LR
 80004e8:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 80004ea:	f7ff ffed 	bl	80004c8 <get_psp_value>
	__asm volatile ("MSR PSP, R0");//initialize PSP
 80004ee:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");
 80004f2:	f85d eb04 	ldr.w	lr, [sp], #4
	//2. change SP to PSP using CONTROL register
	__asm volatile ("MOV R0, #0x02");
 80004f6:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL, R0");
 80004fa:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 80004fe:	4770      	bx	lr
}
 8000500:	bf00      	nop
	...

08000504 <save_psp_value>:

void save_psp_value(uint32_t current_psp_value)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	psp_of_tasks[current_task] = current_psp_value;
 800050c:	4b05      	ldr	r3, [pc, #20]	@ (8000524 <save_psp_value+0x20>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	4619      	mov	r1, r3
 8000512:	4a05      	ldr	r2, [pc, #20]	@ (8000528 <save_psp_value+0x24>)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr
 8000524:	20000098 	.word	0x20000098
 8000528:	20000000 	.word	0x20000000

0800052c <update_next_task>:

void update_next_task(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
	current_task++;
 8000530:	4b08      	ldr	r3, [pc, #32]	@ (8000554 <update_next_task+0x28>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	3301      	adds	r3, #1
 8000536:	b2da      	uxtb	r2, r3
 8000538:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <update_next_task+0x28>)
 800053a:	701a      	strb	r2, [r3, #0]
	current_task %= MAX_TASKS;
 800053c:	4b05      	ldr	r3, [pc, #20]	@ (8000554 <update_next_task+0x28>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	f003 0303 	and.w	r3, r3, #3
 8000544:	b2da      	uxtb	r2, r3
 8000546:	4b03      	ldr	r3, [pc, #12]	@ (8000554 <update_next_task+0x28>)
 8000548:	701a      	strb	r2, [r3, #0]
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20000098 	.word	0x20000098

08000558 <SysTick_Handler>:
__attribute__((naked))void SysTick_Handler(void)
{

	/* Save the context of current task */
	//1. Get current running task's PSP value
	__asm volatile("MRS R0, PSP");
 8000558:	f3ef 8009 	mrs	r0, PSP
	//2. Using that PSP value store SF2 (R4 - R11)
	__asm volatile("STMDB R0!, {R4-R11}");
 800055c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//3. Save the current value of PSP
	__asm volatile("PUSH {LR}");
 8000560:	b500      	push	{lr}
	__asm volatile("BL save_psp_value");
 8000562:	f7ff ffcf 	bl	8000504 <save_psp_value>


	/* Retrivev the context of next task */
	//1. Decide next task to run
	__asm volatile("BL update_next_task");
 8000566:	f7ff ffe1 	bl	800052c <update_next_task>
	//2. get its past PSP value
	__asm volatile ("BL get_psp_value");
 800056a:	f7ff ffad 	bl	80004c8 <get_psp_value>
	//3. Using that PSP value retrieve SF2 (R4 - R11)
	__asm volatile("LDMIA R0!, {R4-R11}");
 800056e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//4. Update PSP and exit
 	__asm volatile("MSR PSP, R0");
 8000572:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 8000576:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 800057a:	4770      	bx	lr
}
 800057c:	bf00      	nop
	...

08000580 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	printf("Exception: HardFault\n");
 8000584:	4802      	ldr	r0, [pc, #8]	@ (8000590 <HardFault_Handler+0x10>)
 8000586:	f000 fa21 	bl	80009cc <puts>
	while(1);
 800058a:	bf00      	nop
 800058c:	e7fd      	b.n	800058a <HardFault_Handler+0xa>
 800058e:	bf00      	nop
 8000590:	08001114 	.word	0x08001114

08000594 <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	printf("Exception: MemManage\n");
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <MemManage_Handler+0x10>)
 800059a:	f000 fa17 	bl	80009cc <puts>
	while(1);
 800059e:	bf00      	nop
 80005a0:	e7fd      	b.n	800059e <MemManage_Handler+0xa>
 80005a2:	bf00      	nop
 80005a4:	0800112c 	.word	0x0800112c

080005a8 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	printf("Exception: BusFault\n");
 80005ac:	4802      	ldr	r0, [pc, #8]	@ (80005b8 <BusFault_Handler+0x10>)
 80005ae:	f000 fa0d 	bl	80009cc <puts>
	while(1);
 80005b2:	bf00      	nop
 80005b4:	e7fd      	b.n	80005b2 <BusFault_Handler+0xa>
 80005b6:	bf00      	nop
 80005b8:	08001144 	.word	0x08001144

080005bc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80005c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <ITM_SendChar+0x44>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a0d      	ldr	r2, [pc, #52]	@ (8000600 <ITM_SendChar+0x44>)
 80005cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005d0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80005d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <ITM_SendChar+0x48>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000604 <ITM_SendChar+0x48>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80005de:	bf00      	nop
 80005e0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0f8      	beq.n	80005e0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80005ee:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	6013      	str	r3, [r2, #0]
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	e000edfc 	.word	0xe000edfc
 8000604:	e0000e00 	.word	0xe0000e00

08000608 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	e00a      	b.n	8000630 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800061a:	f3af 8000 	nop.w
 800061e:	4601      	mov	r1, r0
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	1c5a      	adds	r2, r3, #1
 8000624:	60ba      	str	r2, [r7, #8]
 8000626:	b2ca      	uxtb	r2, r1
 8000628:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	3301      	adds	r3, #1
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	697a      	ldr	r2, [r7, #20]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	429a      	cmp	r2, r3
 8000636:	dbf0      	blt.n	800061a <_read+0x12>
  }

  return len;
 8000638:	687b      	ldr	r3, [r7, #4]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3718      	adds	r7, #24
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	b086      	sub	sp, #24
 8000646:	af00      	add	r7, sp, #0
 8000648:	60f8      	str	r0, [r7, #12]
 800064a:	60b9      	str	r1, [r7, #8]
 800064c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]
 8000652:	e009      	b.n	8000668 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	1c5a      	adds	r2, r3, #1
 8000658:	60ba      	str	r2, [r7, #8]
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ffad 	bl	80005bc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	3301      	adds	r3, #1
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	697a      	ldr	r2, [r7, #20]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	429a      	cmp	r2, r3
 800066e:	dbf1      	blt.n	8000654 <_write+0x12>
  }
  return len;
 8000670:	687b      	ldr	r3, [r7, #4]
}
 8000672:	4618      	mov	r0, r3
 8000674:	3718      	adds	r7, #24
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <_close>:

int _close(int file)
{
 800067a:	b480      	push	{r7}
 800067c:	b083      	sub	sp, #12
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000682:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006a0:	605a      	str	r2, [r3, #4]
  return 0;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr

080006ae <_isatty>:

int _isatty(int file)
{
 80006ae:	b480      	push	{r7}
 80006b0:	b083      	sub	sp, #12
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006b6:	2301      	movs	r3, #1
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr

080006c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006c2:	b480      	push	{r7}
 80006c4:	b085      	sub	sp, #20
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	60f8      	str	r0, [r7, #12]
 80006ca:	60b9      	str	r1, [r7, #8]
 80006cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006ce:	2300      	movs	r3, #0
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
	...

080006dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006e4:	4a14      	ldr	r2, [pc, #80]	@ (8000738 <_sbrk+0x5c>)
 80006e6:	4b15      	ldr	r3, [pc, #84]	@ (800073c <_sbrk+0x60>)
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006f0:	4b13      	ldr	r3, [pc, #76]	@ (8000740 <_sbrk+0x64>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d102      	bne.n	80006fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006f8:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <_sbrk+0x64>)
 80006fa:	4a12      	ldr	r2, [pc, #72]	@ (8000744 <_sbrk+0x68>)
 80006fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006fe:	4b10      	ldr	r3, [pc, #64]	@ (8000740 <_sbrk+0x64>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	693a      	ldr	r2, [r7, #16]
 8000708:	429a      	cmp	r2, r3
 800070a:	d207      	bcs.n	800071c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800070c:	f000 fa8c 	bl	8000c28 <__errno>
 8000710:	4603      	mov	r3, r0
 8000712:	220c      	movs	r2, #12
 8000714:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000716:	f04f 33ff 	mov.w	r3, #4294967295
 800071a:	e009      	b.n	8000730 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800071c:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <_sbrk+0x64>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000722:	4b07      	ldr	r3, [pc, #28]	@ (8000740 <_sbrk+0x64>)
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4413      	add	r3, r2
 800072a:	4a05      	ldr	r2, [pc, #20]	@ (8000740 <_sbrk+0x64>)
 800072c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800072e:	68fb      	ldr	r3, [r7, #12]
}
 8000730:	4618      	mov	r0, r3
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20020000 	.word	0x20020000
 800073c:	00000400 	.word	0x00000400
 8000740:	2000009c 	.word	0x2000009c
 8000744:	200001f0 	.word	0x200001f0

08000748 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000748:	480d      	ldr	r0, [pc, #52]	@ (8000780 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800074a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800074c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000750:	480c      	ldr	r0, [pc, #48]	@ (8000784 <LoopForever+0x6>)
  ldr r1, =_edata
 8000752:	490d      	ldr	r1, [pc, #52]	@ (8000788 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000754:	4a0d      	ldr	r2, [pc, #52]	@ (800078c <LoopForever+0xe>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000758:	e002      	b.n	8000760 <LoopCopyDataInit>

0800075a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800075c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075e:	3304      	adds	r3, #4

08000760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000764:	d3f9      	bcc.n	800075a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000766:	4a0a      	ldr	r2, [pc, #40]	@ (8000790 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000768:	4c0a      	ldr	r4, [pc, #40]	@ (8000794 <LoopForever+0x16>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800076c:	e001      	b.n	8000772 <LoopFillZerobss>

0800076e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000770:	3204      	adds	r2, #4

08000772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000774:	d3fb      	bcc.n	800076e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000776:	f000 fa5d 	bl	8000c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800077a:	f7ff fd41 	bl	8000200 <main>

0800077e <LoopForever>:

LoopForever:
  b LoopForever
 800077e:	e7fe      	b.n	800077e <LoopForever>
  ldr   r0, =_estack
 8000780:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000788:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800078c:	08001160 	.word	0x08001160
  ldr r2, =_sbss
 8000790:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000794:	200001ec 	.word	0x200001ec

08000798 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000798:	e7fe      	b.n	8000798 <ADC_IRQHandler>
	...

0800079c <std>:
 800079c:	2300      	movs	r3, #0
 800079e:	b510      	push	{r4, lr}
 80007a0:	4604      	mov	r4, r0
 80007a2:	e9c0 3300 	strd	r3, r3, [r0]
 80007a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80007aa:	6083      	str	r3, [r0, #8]
 80007ac:	8181      	strh	r1, [r0, #12]
 80007ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80007b0:	81c2      	strh	r2, [r0, #14]
 80007b2:	6183      	str	r3, [r0, #24]
 80007b4:	4619      	mov	r1, r3
 80007b6:	2208      	movs	r2, #8
 80007b8:	305c      	adds	r0, #92	@ 0x5c
 80007ba:	f000 f9e7 	bl	8000b8c <memset>
 80007be:	4b0d      	ldr	r3, [pc, #52]	@ (80007f4 <std+0x58>)
 80007c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80007c2:	4b0d      	ldr	r3, [pc, #52]	@ (80007f8 <std+0x5c>)
 80007c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80007c6:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <std+0x60>)
 80007c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80007ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000800 <std+0x64>)
 80007cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80007ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000804 <std+0x68>)
 80007d0:	6224      	str	r4, [r4, #32]
 80007d2:	429c      	cmp	r4, r3
 80007d4:	d006      	beq.n	80007e4 <std+0x48>
 80007d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80007da:	4294      	cmp	r4, r2
 80007dc:	d002      	beq.n	80007e4 <std+0x48>
 80007de:	33d0      	adds	r3, #208	@ 0xd0
 80007e0:	429c      	cmp	r4, r3
 80007e2:	d105      	bne.n	80007f0 <std+0x54>
 80007e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80007e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007ec:	f000 ba46 	b.w	8000c7c <__retarget_lock_init_recursive>
 80007f0:	bd10      	pop	{r4, pc}
 80007f2:	bf00      	nop
 80007f4:	080009dd 	.word	0x080009dd
 80007f8:	080009ff 	.word	0x080009ff
 80007fc:	08000a37 	.word	0x08000a37
 8000800:	08000a5b 	.word	0x08000a5b
 8000804:	200000a0 	.word	0x200000a0

08000808 <stdio_exit_handler>:
 8000808:	4a02      	ldr	r2, [pc, #8]	@ (8000814 <stdio_exit_handler+0xc>)
 800080a:	4903      	ldr	r1, [pc, #12]	@ (8000818 <stdio_exit_handler+0x10>)
 800080c:	4803      	ldr	r0, [pc, #12]	@ (800081c <stdio_exit_handler+0x14>)
 800080e:	f000 b869 	b.w	80008e4 <_fwalk_sglue>
 8000812:	bf00      	nop
 8000814:	20000010 	.word	0x20000010
 8000818:	08000f75 	.word	0x08000f75
 800081c:	20000020 	.word	0x20000020

08000820 <cleanup_stdio>:
 8000820:	6841      	ldr	r1, [r0, #4]
 8000822:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <cleanup_stdio+0x34>)
 8000824:	4299      	cmp	r1, r3
 8000826:	b510      	push	{r4, lr}
 8000828:	4604      	mov	r4, r0
 800082a:	d001      	beq.n	8000830 <cleanup_stdio+0x10>
 800082c:	f000 fba2 	bl	8000f74 <_fflush_r>
 8000830:	68a1      	ldr	r1, [r4, #8]
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <cleanup_stdio+0x38>)
 8000834:	4299      	cmp	r1, r3
 8000836:	d002      	beq.n	800083e <cleanup_stdio+0x1e>
 8000838:	4620      	mov	r0, r4
 800083a:	f000 fb9b 	bl	8000f74 <_fflush_r>
 800083e:	68e1      	ldr	r1, [r4, #12]
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <cleanup_stdio+0x3c>)
 8000842:	4299      	cmp	r1, r3
 8000844:	d004      	beq.n	8000850 <cleanup_stdio+0x30>
 8000846:	4620      	mov	r0, r4
 8000848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800084c:	f000 bb92 	b.w	8000f74 <_fflush_r>
 8000850:	bd10      	pop	{r4, pc}
 8000852:	bf00      	nop
 8000854:	200000a0 	.word	0x200000a0
 8000858:	20000108 	.word	0x20000108
 800085c:	20000170 	.word	0x20000170

08000860 <global_stdio_init.part.0>:
 8000860:	b510      	push	{r4, lr}
 8000862:	4b0b      	ldr	r3, [pc, #44]	@ (8000890 <global_stdio_init.part.0+0x30>)
 8000864:	4c0b      	ldr	r4, [pc, #44]	@ (8000894 <global_stdio_init.part.0+0x34>)
 8000866:	4a0c      	ldr	r2, [pc, #48]	@ (8000898 <global_stdio_init.part.0+0x38>)
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	4620      	mov	r0, r4
 800086c:	2200      	movs	r2, #0
 800086e:	2104      	movs	r1, #4
 8000870:	f7ff ff94 	bl	800079c <std>
 8000874:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000878:	2201      	movs	r2, #1
 800087a:	2109      	movs	r1, #9
 800087c:	f7ff ff8e 	bl	800079c <std>
 8000880:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000884:	2202      	movs	r2, #2
 8000886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800088a:	2112      	movs	r1, #18
 800088c:	f7ff bf86 	b.w	800079c <std>
 8000890:	200001d8 	.word	0x200001d8
 8000894:	200000a0 	.word	0x200000a0
 8000898:	08000809 	.word	0x08000809

0800089c <__sfp_lock_acquire>:
 800089c:	4801      	ldr	r0, [pc, #4]	@ (80008a4 <__sfp_lock_acquire+0x8>)
 800089e:	f000 b9ee 	b.w	8000c7e <__retarget_lock_acquire_recursive>
 80008a2:	bf00      	nop
 80008a4:	200001e1 	.word	0x200001e1

080008a8 <__sfp_lock_release>:
 80008a8:	4801      	ldr	r0, [pc, #4]	@ (80008b0 <__sfp_lock_release+0x8>)
 80008aa:	f000 b9e9 	b.w	8000c80 <__retarget_lock_release_recursive>
 80008ae:	bf00      	nop
 80008b0:	200001e1 	.word	0x200001e1

080008b4 <__sinit>:
 80008b4:	b510      	push	{r4, lr}
 80008b6:	4604      	mov	r4, r0
 80008b8:	f7ff fff0 	bl	800089c <__sfp_lock_acquire>
 80008bc:	6a23      	ldr	r3, [r4, #32]
 80008be:	b11b      	cbz	r3, 80008c8 <__sinit+0x14>
 80008c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008c4:	f7ff bff0 	b.w	80008a8 <__sfp_lock_release>
 80008c8:	4b04      	ldr	r3, [pc, #16]	@ (80008dc <__sinit+0x28>)
 80008ca:	6223      	str	r3, [r4, #32]
 80008cc:	4b04      	ldr	r3, [pc, #16]	@ (80008e0 <__sinit+0x2c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d1f5      	bne.n	80008c0 <__sinit+0xc>
 80008d4:	f7ff ffc4 	bl	8000860 <global_stdio_init.part.0>
 80008d8:	e7f2      	b.n	80008c0 <__sinit+0xc>
 80008da:	bf00      	nop
 80008dc:	08000821 	.word	0x08000821
 80008e0:	200001d8 	.word	0x200001d8

080008e4 <_fwalk_sglue>:
 80008e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008e8:	4607      	mov	r7, r0
 80008ea:	4688      	mov	r8, r1
 80008ec:	4614      	mov	r4, r2
 80008ee:	2600      	movs	r6, #0
 80008f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008f4:	f1b9 0901 	subs.w	r9, r9, #1
 80008f8:	d505      	bpl.n	8000906 <_fwalk_sglue+0x22>
 80008fa:	6824      	ldr	r4, [r4, #0]
 80008fc:	2c00      	cmp	r4, #0
 80008fe:	d1f7      	bne.n	80008f0 <_fwalk_sglue+0xc>
 8000900:	4630      	mov	r0, r6
 8000902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000906:	89ab      	ldrh	r3, [r5, #12]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d907      	bls.n	800091c <_fwalk_sglue+0x38>
 800090c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000910:	3301      	adds	r3, #1
 8000912:	d003      	beq.n	800091c <_fwalk_sglue+0x38>
 8000914:	4629      	mov	r1, r5
 8000916:	4638      	mov	r0, r7
 8000918:	47c0      	blx	r8
 800091a:	4306      	orrs	r6, r0
 800091c:	3568      	adds	r5, #104	@ 0x68
 800091e:	e7e9      	b.n	80008f4 <_fwalk_sglue+0x10>

08000920 <_puts_r>:
 8000920:	6a03      	ldr	r3, [r0, #32]
 8000922:	b570      	push	{r4, r5, r6, lr}
 8000924:	6884      	ldr	r4, [r0, #8]
 8000926:	4605      	mov	r5, r0
 8000928:	460e      	mov	r6, r1
 800092a:	b90b      	cbnz	r3, 8000930 <_puts_r+0x10>
 800092c:	f7ff ffc2 	bl	80008b4 <__sinit>
 8000930:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000932:	07db      	lsls	r3, r3, #31
 8000934:	d405      	bmi.n	8000942 <_puts_r+0x22>
 8000936:	89a3      	ldrh	r3, [r4, #12]
 8000938:	0598      	lsls	r0, r3, #22
 800093a:	d402      	bmi.n	8000942 <_puts_r+0x22>
 800093c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800093e:	f000 f99e 	bl	8000c7e <__retarget_lock_acquire_recursive>
 8000942:	89a3      	ldrh	r3, [r4, #12]
 8000944:	0719      	lsls	r1, r3, #28
 8000946:	d502      	bpl.n	800094e <_puts_r+0x2e>
 8000948:	6923      	ldr	r3, [r4, #16]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d135      	bne.n	80009ba <_puts_r+0x9a>
 800094e:	4621      	mov	r1, r4
 8000950:	4628      	mov	r0, r5
 8000952:	f000 f8c5 	bl	8000ae0 <__swsetup_r>
 8000956:	b380      	cbz	r0, 80009ba <_puts_r+0x9a>
 8000958:	f04f 35ff 	mov.w	r5, #4294967295
 800095c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800095e:	07da      	lsls	r2, r3, #31
 8000960:	d405      	bmi.n	800096e <_puts_r+0x4e>
 8000962:	89a3      	ldrh	r3, [r4, #12]
 8000964:	059b      	lsls	r3, r3, #22
 8000966:	d402      	bmi.n	800096e <_puts_r+0x4e>
 8000968:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800096a:	f000 f989 	bl	8000c80 <__retarget_lock_release_recursive>
 800096e:	4628      	mov	r0, r5
 8000970:	bd70      	pop	{r4, r5, r6, pc}
 8000972:	2b00      	cmp	r3, #0
 8000974:	da04      	bge.n	8000980 <_puts_r+0x60>
 8000976:	69a2      	ldr	r2, [r4, #24]
 8000978:	429a      	cmp	r2, r3
 800097a:	dc17      	bgt.n	80009ac <_puts_r+0x8c>
 800097c:	290a      	cmp	r1, #10
 800097e:	d015      	beq.n	80009ac <_puts_r+0x8c>
 8000980:	6823      	ldr	r3, [r4, #0]
 8000982:	1c5a      	adds	r2, r3, #1
 8000984:	6022      	str	r2, [r4, #0]
 8000986:	7019      	strb	r1, [r3, #0]
 8000988:	68a3      	ldr	r3, [r4, #8]
 800098a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800098e:	3b01      	subs	r3, #1
 8000990:	60a3      	str	r3, [r4, #8]
 8000992:	2900      	cmp	r1, #0
 8000994:	d1ed      	bne.n	8000972 <_puts_r+0x52>
 8000996:	2b00      	cmp	r3, #0
 8000998:	da11      	bge.n	80009be <_puts_r+0x9e>
 800099a:	4622      	mov	r2, r4
 800099c:	210a      	movs	r1, #10
 800099e:	4628      	mov	r0, r5
 80009a0:	f000 f85f 	bl	8000a62 <__swbuf_r>
 80009a4:	3001      	adds	r0, #1
 80009a6:	d0d7      	beq.n	8000958 <_puts_r+0x38>
 80009a8:	250a      	movs	r5, #10
 80009aa:	e7d7      	b.n	800095c <_puts_r+0x3c>
 80009ac:	4622      	mov	r2, r4
 80009ae:	4628      	mov	r0, r5
 80009b0:	f000 f857 	bl	8000a62 <__swbuf_r>
 80009b4:	3001      	adds	r0, #1
 80009b6:	d1e7      	bne.n	8000988 <_puts_r+0x68>
 80009b8:	e7ce      	b.n	8000958 <_puts_r+0x38>
 80009ba:	3e01      	subs	r6, #1
 80009bc:	e7e4      	b.n	8000988 <_puts_r+0x68>
 80009be:	6823      	ldr	r3, [r4, #0]
 80009c0:	1c5a      	adds	r2, r3, #1
 80009c2:	6022      	str	r2, [r4, #0]
 80009c4:	220a      	movs	r2, #10
 80009c6:	701a      	strb	r2, [r3, #0]
 80009c8:	e7ee      	b.n	80009a8 <_puts_r+0x88>
	...

080009cc <puts>:
 80009cc:	4b02      	ldr	r3, [pc, #8]	@ (80009d8 <puts+0xc>)
 80009ce:	4601      	mov	r1, r0
 80009d0:	6818      	ldr	r0, [r3, #0]
 80009d2:	f7ff bfa5 	b.w	8000920 <_puts_r>
 80009d6:	bf00      	nop
 80009d8:	2000001c 	.word	0x2000001c

080009dc <__sread>:
 80009dc:	b510      	push	{r4, lr}
 80009de:	460c      	mov	r4, r1
 80009e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009e4:	f000 f8fc 	bl	8000be0 <_read_r>
 80009e8:	2800      	cmp	r0, #0
 80009ea:	bfab      	itete	ge
 80009ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80009ee:	89a3      	ldrhlt	r3, [r4, #12]
 80009f0:	181b      	addge	r3, r3, r0
 80009f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80009f6:	bfac      	ite	ge
 80009f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80009fa:	81a3      	strhlt	r3, [r4, #12]
 80009fc:	bd10      	pop	{r4, pc}

080009fe <__swrite>:
 80009fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a02:	461f      	mov	r7, r3
 8000a04:	898b      	ldrh	r3, [r1, #12]
 8000a06:	05db      	lsls	r3, r3, #23
 8000a08:	4605      	mov	r5, r0
 8000a0a:	460c      	mov	r4, r1
 8000a0c:	4616      	mov	r6, r2
 8000a0e:	d505      	bpl.n	8000a1c <__swrite+0x1e>
 8000a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a14:	2302      	movs	r3, #2
 8000a16:	2200      	movs	r2, #0
 8000a18:	f000 f8d0 	bl	8000bbc <_lseek_r>
 8000a1c:	89a3      	ldrh	r3, [r4, #12]
 8000a1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000a22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a26:	81a3      	strh	r3, [r4, #12]
 8000a28:	4632      	mov	r2, r6
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000a32:	f000 b8e7 	b.w	8000c04 <_write_r>

08000a36 <__sseek>:
 8000a36:	b510      	push	{r4, lr}
 8000a38:	460c      	mov	r4, r1
 8000a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a3e:	f000 f8bd 	bl	8000bbc <_lseek_r>
 8000a42:	1c43      	adds	r3, r0, #1
 8000a44:	89a3      	ldrh	r3, [r4, #12]
 8000a46:	bf15      	itete	ne
 8000a48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000a4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000a4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000a52:	81a3      	strheq	r3, [r4, #12]
 8000a54:	bf18      	it	ne
 8000a56:	81a3      	strhne	r3, [r4, #12]
 8000a58:	bd10      	pop	{r4, pc}

08000a5a <__sclose>:
 8000a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a5e:	f000 b89d 	b.w	8000b9c <_close_r>

08000a62 <__swbuf_r>:
 8000a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a64:	460e      	mov	r6, r1
 8000a66:	4614      	mov	r4, r2
 8000a68:	4605      	mov	r5, r0
 8000a6a:	b118      	cbz	r0, 8000a74 <__swbuf_r+0x12>
 8000a6c:	6a03      	ldr	r3, [r0, #32]
 8000a6e:	b90b      	cbnz	r3, 8000a74 <__swbuf_r+0x12>
 8000a70:	f7ff ff20 	bl	80008b4 <__sinit>
 8000a74:	69a3      	ldr	r3, [r4, #24]
 8000a76:	60a3      	str	r3, [r4, #8]
 8000a78:	89a3      	ldrh	r3, [r4, #12]
 8000a7a:	071a      	lsls	r2, r3, #28
 8000a7c:	d501      	bpl.n	8000a82 <__swbuf_r+0x20>
 8000a7e:	6923      	ldr	r3, [r4, #16]
 8000a80:	b943      	cbnz	r3, 8000a94 <__swbuf_r+0x32>
 8000a82:	4621      	mov	r1, r4
 8000a84:	4628      	mov	r0, r5
 8000a86:	f000 f82b 	bl	8000ae0 <__swsetup_r>
 8000a8a:	b118      	cbz	r0, 8000a94 <__swbuf_r+0x32>
 8000a8c:	f04f 37ff 	mov.w	r7, #4294967295
 8000a90:	4638      	mov	r0, r7
 8000a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a94:	6823      	ldr	r3, [r4, #0]
 8000a96:	6922      	ldr	r2, [r4, #16]
 8000a98:	1a98      	subs	r0, r3, r2
 8000a9a:	6963      	ldr	r3, [r4, #20]
 8000a9c:	b2f6      	uxtb	r6, r6
 8000a9e:	4283      	cmp	r3, r0
 8000aa0:	4637      	mov	r7, r6
 8000aa2:	dc05      	bgt.n	8000ab0 <__swbuf_r+0x4e>
 8000aa4:	4621      	mov	r1, r4
 8000aa6:	4628      	mov	r0, r5
 8000aa8:	f000 fa64 	bl	8000f74 <_fflush_r>
 8000aac:	2800      	cmp	r0, #0
 8000aae:	d1ed      	bne.n	8000a8c <__swbuf_r+0x2a>
 8000ab0:	68a3      	ldr	r3, [r4, #8]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	60a3      	str	r3, [r4, #8]
 8000ab6:	6823      	ldr	r3, [r4, #0]
 8000ab8:	1c5a      	adds	r2, r3, #1
 8000aba:	6022      	str	r2, [r4, #0]
 8000abc:	701e      	strb	r6, [r3, #0]
 8000abe:	6962      	ldr	r2, [r4, #20]
 8000ac0:	1c43      	adds	r3, r0, #1
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d004      	beq.n	8000ad0 <__swbuf_r+0x6e>
 8000ac6:	89a3      	ldrh	r3, [r4, #12]
 8000ac8:	07db      	lsls	r3, r3, #31
 8000aca:	d5e1      	bpl.n	8000a90 <__swbuf_r+0x2e>
 8000acc:	2e0a      	cmp	r6, #10
 8000ace:	d1df      	bne.n	8000a90 <__swbuf_r+0x2e>
 8000ad0:	4621      	mov	r1, r4
 8000ad2:	4628      	mov	r0, r5
 8000ad4:	f000 fa4e 	bl	8000f74 <_fflush_r>
 8000ad8:	2800      	cmp	r0, #0
 8000ada:	d0d9      	beq.n	8000a90 <__swbuf_r+0x2e>
 8000adc:	e7d6      	b.n	8000a8c <__swbuf_r+0x2a>
	...

08000ae0 <__swsetup_r>:
 8000ae0:	b538      	push	{r3, r4, r5, lr}
 8000ae2:	4b29      	ldr	r3, [pc, #164]	@ (8000b88 <__swsetup_r+0xa8>)
 8000ae4:	4605      	mov	r5, r0
 8000ae6:	6818      	ldr	r0, [r3, #0]
 8000ae8:	460c      	mov	r4, r1
 8000aea:	b118      	cbz	r0, 8000af4 <__swsetup_r+0x14>
 8000aec:	6a03      	ldr	r3, [r0, #32]
 8000aee:	b90b      	cbnz	r3, 8000af4 <__swsetup_r+0x14>
 8000af0:	f7ff fee0 	bl	80008b4 <__sinit>
 8000af4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000af8:	0719      	lsls	r1, r3, #28
 8000afa:	d422      	bmi.n	8000b42 <__swsetup_r+0x62>
 8000afc:	06da      	lsls	r2, r3, #27
 8000afe:	d407      	bmi.n	8000b10 <__swsetup_r+0x30>
 8000b00:	2209      	movs	r2, #9
 8000b02:	602a      	str	r2, [r5, #0]
 8000b04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b08:	81a3      	strh	r3, [r4, #12]
 8000b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0e:	e033      	b.n	8000b78 <__swsetup_r+0x98>
 8000b10:	0758      	lsls	r0, r3, #29
 8000b12:	d512      	bpl.n	8000b3a <__swsetup_r+0x5a>
 8000b14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000b16:	b141      	cbz	r1, 8000b2a <__swsetup_r+0x4a>
 8000b18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000b1c:	4299      	cmp	r1, r3
 8000b1e:	d002      	beq.n	8000b26 <__swsetup_r+0x46>
 8000b20:	4628      	mov	r0, r5
 8000b22:	f000 f8af 	bl	8000c84 <_free_r>
 8000b26:	2300      	movs	r3, #0
 8000b28:	6363      	str	r3, [r4, #52]	@ 0x34
 8000b2a:	89a3      	ldrh	r3, [r4, #12]
 8000b2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000b30:	81a3      	strh	r3, [r4, #12]
 8000b32:	2300      	movs	r3, #0
 8000b34:	6063      	str	r3, [r4, #4]
 8000b36:	6923      	ldr	r3, [r4, #16]
 8000b38:	6023      	str	r3, [r4, #0]
 8000b3a:	89a3      	ldrh	r3, [r4, #12]
 8000b3c:	f043 0308 	orr.w	r3, r3, #8
 8000b40:	81a3      	strh	r3, [r4, #12]
 8000b42:	6923      	ldr	r3, [r4, #16]
 8000b44:	b94b      	cbnz	r3, 8000b5a <__swsetup_r+0x7a>
 8000b46:	89a3      	ldrh	r3, [r4, #12]
 8000b48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000b4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000b50:	d003      	beq.n	8000b5a <__swsetup_r+0x7a>
 8000b52:	4621      	mov	r1, r4
 8000b54:	4628      	mov	r0, r5
 8000b56:	f000 fa5b 	bl	8001010 <__smakebuf_r>
 8000b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b5e:	f013 0201 	ands.w	r2, r3, #1
 8000b62:	d00a      	beq.n	8000b7a <__swsetup_r+0x9a>
 8000b64:	2200      	movs	r2, #0
 8000b66:	60a2      	str	r2, [r4, #8]
 8000b68:	6962      	ldr	r2, [r4, #20]
 8000b6a:	4252      	negs	r2, r2
 8000b6c:	61a2      	str	r2, [r4, #24]
 8000b6e:	6922      	ldr	r2, [r4, #16]
 8000b70:	b942      	cbnz	r2, 8000b84 <__swsetup_r+0xa4>
 8000b72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000b76:	d1c5      	bne.n	8000b04 <__swsetup_r+0x24>
 8000b78:	bd38      	pop	{r3, r4, r5, pc}
 8000b7a:	0799      	lsls	r1, r3, #30
 8000b7c:	bf58      	it	pl
 8000b7e:	6962      	ldrpl	r2, [r4, #20]
 8000b80:	60a2      	str	r2, [r4, #8]
 8000b82:	e7f4      	b.n	8000b6e <__swsetup_r+0x8e>
 8000b84:	2000      	movs	r0, #0
 8000b86:	e7f7      	b.n	8000b78 <__swsetup_r+0x98>
 8000b88:	2000001c 	.word	0x2000001c

08000b8c <memset>:
 8000b8c:	4402      	add	r2, r0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d100      	bne.n	8000b96 <memset+0xa>
 8000b94:	4770      	bx	lr
 8000b96:	f803 1b01 	strb.w	r1, [r3], #1
 8000b9a:	e7f9      	b.n	8000b90 <memset+0x4>

08000b9c <_close_r>:
 8000b9c:	b538      	push	{r3, r4, r5, lr}
 8000b9e:	4d06      	ldr	r5, [pc, #24]	@ (8000bb8 <_close_r+0x1c>)
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	4608      	mov	r0, r1
 8000ba6:	602b      	str	r3, [r5, #0]
 8000ba8:	f7ff fd67 	bl	800067a <_close>
 8000bac:	1c43      	adds	r3, r0, #1
 8000bae:	d102      	bne.n	8000bb6 <_close_r+0x1a>
 8000bb0:	682b      	ldr	r3, [r5, #0]
 8000bb2:	b103      	cbz	r3, 8000bb6 <_close_r+0x1a>
 8000bb4:	6023      	str	r3, [r4, #0]
 8000bb6:	bd38      	pop	{r3, r4, r5, pc}
 8000bb8:	200001dc 	.word	0x200001dc

08000bbc <_lseek_r>:
 8000bbc:	b538      	push	{r3, r4, r5, lr}
 8000bbe:	4d07      	ldr	r5, [pc, #28]	@ (8000bdc <_lseek_r+0x20>)
 8000bc0:	4604      	mov	r4, r0
 8000bc2:	4608      	mov	r0, r1
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	602a      	str	r2, [r5, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	f7ff fd79 	bl	80006c2 <_lseek>
 8000bd0:	1c43      	adds	r3, r0, #1
 8000bd2:	d102      	bne.n	8000bda <_lseek_r+0x1e>
 8000bd4:	682b      	ldr	r3, [r5, #0]
 8000bd6:	b103      	cbz	r3, 8000bda <_lseek_r+0x1e>
 8000bd8:	6023      	str	r3, [r4, #0]
 8000bda:	bd38      	pop	{r3, r4, r5, pc}
 8000bdc:	200001dc 	.word	0x200001dc

08000be0 <_read_r>:
 8000be0:	b538      	push	{r3, r4, r5, lr}
 8000be2:	4d07      	ldr	r5, [pc, #28]	@ (8000c00 <_read_r+0x20>)
 8000be4:	4604      	mov	r4, r0
 8000be6:	4608      	mov	r0, r1
 8000be8:	4611      	mov	r1, r2
 8000bea:	2200      	movs	r2, #0
 8000bec:	602a      	str	r2, [r5, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	f7ff fd0a 	bl	8000608 <_read>
 8000bf4:	1c43      	adds	r3, r0, #1
 8000bf6:	d102      	bne.n	8000bfe <_read_r+0x1e>
 8000bf8:	682b      	ldr	r3, [r5, #0]
 8000bfa:	b103      	cbz	r3, 8000bfe <_read_r+0x1e>
 8000bfc:	6023      	str	r3, [r4, #0]
 8000bfe:	bd38      	pop	{r3, r4, r5, pc}
 8000c00:	200001dc 	.word	0x200001dc

08000c04 <_write_r>:
 8000c04:	b538      	push	{r3, r4, r5, lr}
 8000c06:	4d07      	ldr	r5, [pc, #28]	@ (8000c24 <_write_r+0x20>)
 8000c08:	4604      	mov	r4, r0
 8000c0a:	4608      	mov	r0, r1
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	2200      	movs	r2, #0
 8000c10:	602a      	str	r2, [r5, #0]
 8000c12:	461a      	mov	r2, r3
 8000c14:	f7ff fd15 	bl	8000642 <_write>
 8000c18:	1c43      	adds	r3, r0, #1
 8000c1a:	d102      	bne.n	8000c22 <_write_r+0x1e>
 8000c1c:	682b      	ldr	r3, [r5, #0]
 8000c1e:	b103      	cbz	r3, 8000c22 <_write_r+0x1e>
 8000c20:	6023      	str	r3, [r4, #0]
 8000c22:	bd38      	pop	{r3, r4, r5, pc}
 8000c24:	200001dc 	.word	0x200001dc

08000c28 <__errno>:
 8000c28:	4b01      	ldr	r3, [pc, #4]	@ (8000c30 <__errno+0x8>)
 8000c2a:	6818      	ldr	r0, [r3, #0]
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	2000001c 	.word	0x2000001c

08000c34 <__libc_init_array>:
 8000c34:	b570      	push	{r4, r5, r6, lr}
 8000c36:	4d0d      	ldr	r5, [pc, #52]	@ (8000c6c <__libc_init_array+0x38>)
 8000c38:	4c0d      	ldr	r4, [pc, #52]	@ (8000c70 <__libc_init_array+0x3c>)
 8000c3a:	1b64      	subs	r4, r4, r5
 8000c3c:	10a4      	asrs	r4, r4, #2
 8000c3e:	2600      	movs	r6, #0
 8000c40:	42a6      	cmp	r6, r4
 8000c42:	d109      	bne.n	8000c58 <__libc_init_array+0x24>
 8000c44:	4d0b      	ldr	r5, [pc, #44]	@ (8000c74 <__libc_init_array+0x40>)
 8000c46:	4c0c      	ldr	r4, [pc, #48]	@ (8000c78 <__libc_init_array+0x44>)
 8000c48:	f000 fa50 	bl	80010ec <_init>
 8000c4c:	1b64      	subs	r4, r4, r5
 8000c4e:	10a4      	asrs	r4, r4, #2
 8000c50:	2600      	movs	r6, #0
 8000c52:	42a6      	cmp	r6, r4
 8000c54:	d105      	bne.n	8000c62 <__libc_init_array+0x2e>
 8000c56:	bd70      	pop	{r4, r5, r6, pc}
 8000c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c5c:	4798      	blx	r3
 8000c5e:	3601      	adds	r6, #1
 8000c60:	e7ee      	b.n	8000c40 <__libc_init_array+0xc>
 8000c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c66:	4798      	blx	r3
 8000c68:	3601      	adds	r6, #1
 8000c6a:	e7f2      	b.n	8000c52 <__libc_init_array+0x1e>
 8000c6c:	08001158 	.word	0x08001158
 8000c70:	08001158 	.word	0x08001158
 8000c74:	08001158 	.word	0x08001158
 8000c78:	0800115c 	.word	0x0800115c

08000c7c <__retarget_lock_init_recursive>:
 8000c7c:	4770      	bx	lr

08000c7e <__retarget_lock_acquire_recursive>:
 8000c7e:	4770      	bx	lr

08000c80 <__retarget_lock_release_recursive>:
 8000c80:	4770      	bx	lr
	...

08000c84 <_free_r>:
 8000c84:	b538      	push	{r3, r4, r5, lr}
 8000c86:	4605      	mov	r5, r0
 8000c88:	2900      	cmp	r1, #0
 8000c8a:	d041      	beq.n	8000d10 <_free_r+0x8c>
 8000c8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c90:	1f0c      	subs	r4, r1, #4
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	bfb8      	it	lt
 8000c96:	18e4      	addlt	r4, r4, r3
 8000c98:	f000 f8e0 	bl	8000e5c <__malloc_lock>
 8000c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8000d14 <_free_r+0x90>)
 8000c9e:	6813      	ldr	r3, [r2, #0]
 8000ca0:	b933      	cbnz	r3, 8000cb0 <_free_r+0x2c>
 8000ca2:	6063      	str	r3, [r4, #4]
 8000ca4:	6014      	str	r4, [r2, #0]
 8000ca6:	4628      	mov	r0, r5
 8000ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cac:	f000 b8dc 	b.w	8000e68 <__malloc_unlock>
 8000cb0:	42a3      	cmp	r3, r4
 8000cb2:	d908      	bls.n	8000cc6 <_free_r+0x42>
 8000cb4:	6820      	ldr	r0, [r4, #0]
 8000cb6:	1821      	adds	r1, r4, r0
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	bf01      	itttt	eq
 8000cbc:	6819      	ldreq	r1, [r3, #0]
 8000cbe:	685b      	ldreq	r3, [r3, #4]
 8000cc0:	1809      	addeq	r1, r1, r0
 8000cc2:	6021      	streq	r1, [r4, #0]
 8000cc4:	e7ed      	b.n	8000ca2 <_free_r+0x1e>
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	b10b      	cbz	r3, 8000cd0 <_free_r+0x4c>
 8000ccc:	42a3      	cmp	r3, r4
 8000cce:	d9fa      	bls.n	8000cc6 <_free_r+0x42>
 8000cd0:	6811      	ldr	r1, [r2, #0]
 8000cd2:	1850      	adds	r0, r2, r1
 8000cd4:	42a0      	cmp	r0, r4
 8000cd6:	d10b      	bne.n	8000cf0 <_free_r+0x6c>
 8000cd8:	6820      	ldr	r0, [r4, #0]
 8000cda:	4401      	add	r1, r0
 8000cdc:	1850      	adds	r0, r2, r1
 8000cde:	4283      	cmp	r3, r0
 8000ce0:	6011      	str	r1, [r2, #0]
 8000ce2:	d1e0      	bne.n	8000ca6 <_free_r+0x22>
 8000ce4:	6818      	ldr	r0, [r3, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	6053      	str	r3, [r2, #4]
 8000cea:	4408      	add	r0, r1
 8000cec:	6010      	str	r0, [r2, #0]
 8000cee:	e7da      	b.n	8000ca6 <_free_r+0x22>
 8000cf0:	d902      	bls.n	8000cf8 <_free_r+0x74>
 8000cf2:	230c      	movs	r3, #12
 8000cf4:	602b      	str	r3, [r5, #0]
 8000cf6:	e7d6      	b.n	8000ca6 <_free_r+0x22>
 8000cf8:	6820      	ldr	r0, [r4, #0]
 8000cfa:	1821      	adds	r1, r4, r0
 8000cfc:	428b      	cmp	r3, r1
 8000cfe:	bf04      	itt	eq
 8000d00:	6819      	ldreq	r1, [r3, #0]
 8000d02:	685b      	ldreq	r3, [r3, #4]
 8000d04:	6063      	str	r3, [r4, #4]
 8000d06:	bf04      	itt	eq
 8000d08:	1809      	addeq	r1, r1, r0
 8000d0a:	6021      	streq	r1, [r4, #0]
 8000d0c:	6054      	str	r4, [r2, #4]
 8000d0e:	e7ca      	b.n	8000ca6 <_free_r+0x22>
 8000d10:	bd38      	pop	{r3, r4, r5, pc}
 8000d12:	bf00      	nop
 8000d14:	200001e8 	.word	0x200001e8

08000d18 <sbrk_aligned>:
 8000d18:	b570      	push	{r4, r5, r6, lr}
 8000d1a:	4e0f      	ldr	r6, [pc, #60]	@ (8000d58 <sbrk_aligned+0x40>)
 8000d1c:	460c      	mov	r4, r1
 8000d1e:	6831      	ldr	r1, [r6, #0]
 8000d20:	4605      	mov	r5, r0
 8000d22:	b911      	cbnz	r1, 8000d2a <sbrk_aligned+0x12>
 8000d24:	f000 f9d2 	bl	80010cc <_sbrk_r>
 8000d28:	6030      	str	r0, [r6, #0]
 8000d2a:	4621      	mov	r1, r4
 8000d2c:	4628      	mov	r0, r5
 8000d2e:	f000 f9cd 	bl	80010cc <_sbrk_r>
 8000d32:	1c43      	adds	r3, r0, #1
 8000d34:	d103      	bne.n	8000d3e <sbrk_aligned+0x26>
 8000d36:	f04f 34ff 	mov.w	r4, #4294967295
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	bd70      	pop	{r4, r5, r6, pc}
 8000d3e:	1cc4      	adds	r4, r0, #3
 8000d40:	f024 0403 	bic.w	r4, r4, #3
 8000d44:	42a0      	cmp	r0, r4
 8000d46:	d0f8      	beq.n	8000d3a <sbrk_aligned+0x22>
 8000d48:	1a21      	subs	r1, r4, r0
 8000d4a:	4628      	mov	r0, r5
 8000d4c:	f000 f9be 	bl	80010cc <_sbrk_r>
 8000d50:	3001      	adds	r0, #1
 8000d52:	d1f2      	bne.n	8000d3a <sbrk_aligned+0x22>
 8000d54:	e7ef      	b.n	8000d36 <sbrk_aligned+0x1e>
 8000d56:	bf00      	nop
 8000d58:	200001e4 	.word	0x200001e4

08000d5c <_malloc_r>:
 8000d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d60:	1ccd      	adds	r5, r1, #3
 8000d62:	f025 0503 	bic.w	r5, r5, #3
 8000d66:	3508      	adds	r5, #8
 8000d68:	2d0c      	cmp	r5, #12
 8000d6a:	bf38      	it	cc
 8000d6c:	250c      	movcc	r5, #12
 8000d6e:	2d00      	cmp	r5, #0
 8000d70:	4606      	mov	r6, r0
 8000d72:	db01      	blt.n	8000d78 <_malloc_r+0x1c>
 8000d74:	42a9      	cmp	r1, r5
 8000d76:	d904      	bls.n	8000d82 <_malloc_r+0x26>
 8000d78:	230c      	movs	r3, #12
 8000d7a:	6033      	str	r3, [r6, #0]
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000e58 <_malloc_r+0xfc>
 8000d86:	f000 f869 	bl	8000e5c <__malloc_lock>
 8000d8a:	f8d8 3000 	ldr.w	r3, [r8]
 8000d8e:	461c      	mov	r4, r3
 8000d90:	bb44      	cbnz	r4, 8000de4 <_malloc_r+0x88>
 8000d92:	4629      	mov	r1, r5
 8000d94:	4630      	mov	r0, r6
 8000d96:	f7ff ffbf 	bl	8000d18 <sbrk_aligned>
 8000d9a:	1c43      	adds	r3, r0, #1
 8000d9c:	4604      	mov	r4, r0
 8000d9e:	d158      	bne.n	8000e52 <_malloc_r+0xf6>
 8000da0:	f8d8 4000 	ldr.w	r4, [r8]
 8000da4:	4627      	mov	r7, r4
 8000da6:	2f00      	cmp	r7, #0
 8000da8:	d143      	bne.n	8000e32 <_malloc_r+0xd6>
 8000daa:	2c00      	cmp	r4, #0
 8000dac:	d04b      	beq.n	8000e46 <_malloc_r+0xea>
 8000dae:	6823      	ldr	r3, [r4, #0]
 8000db0:	4639      	mov	r1, r7
 8000db2:	4630      	mov	r0, r6
 8000db4:	eb04 0903 	add.w	r9, r4, r3
 8000db8:	f000 f988 	bl	80010cc <_sbrk_r>
 8000dbc:	4581      	cmp	r9, r0
 8000dbe:	d142      	bne.n	8000e46 <_malloc_r+0xea>
 8000dc0:	6821      	ldr	r1, [r4, #0]
 8000dc2:	1a6d      	subs	r5, r5, r1
 8000dc4:	4629      	mov	r1, r5
 8000dc6:	4630      	mov	r0, r6
 8000dc8:	f7ff ffa6 	bl	8000d18 <sbrk_aligned>
 8000dcc:	3001      	adds	r0, #1
 8000dce:	d03a      	beq.n	8000e46 <_malloc_r+0xea>
 8000dd0:	6823      	ldr	r3, [r4, #0]
 8000dd2:	442b      	add	r3, r5
 8000dd4:	6023      	str	r3, [r4, #0]
 8000dd6:	f8d8 3000 	ldr.w	r3, [r8]
 8000dda:	685a      	ldr	r2, [r3, #4]
 8000ddc:	bb62      	cbnz	r2, 8000e38 <_malloc_r+0xdc>
 8000dde:	f8c8 7000 	str.w	r7, [r8]
 8000de2:	e00f      	b.n	8000e04 <_malloc_r+0xa8>
 8000de4:	6822      	ldr	r2, [r4, #0]
 8000de6:	1b52      	subs	r2, r2, r5
 8000de8:	d420      	bmi.n	8000e2c <_malloc_r+0xd0>
 8000dea:	2a0b      	cmp	r2, #11
 8000dec:	d917      	bls.n	8000e1e <_malloc_r+0xc2>
 8000dee:	1961      	adds	r1, r4, r5
 8000df0:	42a3      	cmp	r3, r4
 8000df2:	6025      	str	r5, [r4, #0]
 8000df4:	bf18      	it	ne
 8000df6:	6059      	strne	r1, [r3, #4]
 8000df8:	6863      	ldr	r3, [r4, #4]
 8000dfa:	bf08      	it	eq
 8000dfc:	f8c8 1000 	streq.w	r1, [r8]
 8000e00:	5162      	str	r2, [r4, r5]
 8000e02:	604b      	str	r3, [r1, #4]
 8000e04:	4630      	mov	r0, r6
 8000e06:	f000 f82f 	bl	8000e68 <__malloc_unlock>
 8000e0a:	f104 000b 	add.w	r0, r4, #11
 8000e0e:	1d23      	adds	r3, r4, #4
 8000e10:	f020 0007 	bic.w	r0, r0, #7
 8000e14:	1ac2      	subs	r2, r0, r3
 8000e16:	bf1c      	itt	ne
 8000e18:	1a1b      	subne	r3, r3, r0
 8000e1a:	50a3      	strne	r3, [r4, r2]
 8000e1c:	e7af      	b.n	8000d7e <_malloc_r+0x22>
 8000e1e:	6862      	ldr	r2, [r4, #4]
 8000e20:	42a3      	cmp	r3, r4
 8000e22:	bf0c      	ite	eq
 8000e24:	f8c8 2000 	streq.w	r2, [r8]
 8000e28:	605a      	strne	r2, [r3, #4]
 8000e2a:	e7eb      	b.n	8000e04 <_malloc_r+0xa8>
 8000e2c:	4623      	mov	r3, r4
 8000e2e:	6864      	ldr	r4, [r4, #4]
 8000e30:	e7ae      	b.n	8000d90 <_malloc_r+0x34>
 8000e32:	463c      	mov	r4, r7
 8000e34:	687f      	ldr	r7, [r7, #4]
 8000e36:	e7b6      	b.n	8000da6 <_malloc_r+0x4a>
 8000e38:	461a      	mov	r2, r3
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	42a3      	cmp	r3, r4
 8000e3e:	d1fb      	bne.n	8000e38 <_malloc_r+0xdc>
 8000e40:	2300      	movs	r3, #0
 8000e42:	6053      	str	r3, [r2, #4]
 8000e44:	e7de      	b.n	8000e04 <_malloc_r+0xa8>
 8000e46:	230c      	movs	r3, #12
 8000e48:	6033      	str	r3, [r6, #0]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	f000 f80c 	bl	8000e68 <__malloc_unlock>
 8000e50:	e794      	b.n	8000d7c <_malloc_r+0x20>
 8000e52:	6005      	str	r5, [r0, #0]
 8000e54:	e7d6      	b.n	8000e04 <_malloc_r+0xa8>
 8000e56:	bf00      	nop
 8000e58:	200001e8 	.word	0x200001e8

08000e5c <__malloc_lock>:
 8000e5c:	4801      	ldr	r0, [pc, #4]	@ (8000e64 <__malloc_lock+0x8>)
 8000e5e:	f7ff bf0e 	b.w	8000c7e <__retarget_lock_acquire_recursive>
 8000e62:	bf00      	nop
 8000e64:	200001e0 	.word	0x200001e0

08000e68 <__malloc_unlock>:
 8000e68:	4801      	ldr	r0, [pc, #4]	@ (8000e70 <__malloc_unlock+0x8>)
 8000e6a:	f7ff bf09 	b.w	8000c80 <__retarget_lock_release_recursive>
 8000e6e:	bf00      	nop
 8000e70:	200001e0 	.word	0x200001e0

08000e74 <__sflush_r>:
 8000e74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e7a:	0716      	lsls	r6, r2, #28
 8000e7c:	4605      	mov	r5, r0
 8000e7e:	460c      	mov	r4, r1
 8000e80:	d454      	bmi.n	8000f2c <__sflush_r+0xb8>
 8000e82:	684b      	ldr	r3, [r1, #4]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	dc02      	bgt.n	8000e8e <__sflush_r+0x1a>
 8000e88:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	dd48      	ble.n	8000f20 <__sflush_r+0xac>
 8000e8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000e90:	2e00      	cmp	r6, #0
 8000e92:	d045      	beq.n	8000f20 <__sflush_r+0xac>
 8000e94:	2300      	movs	r3, #0
 8000e96:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000e9a:	682f      	ldr	r7, [r5, #0]
 8000e9c:	6a21      	ldr	r1, [r4, #32]
 8000e9e:	602b      	str	r3, [r5, #0]
 8000ea0:	d030      	beq.n	8000f04 <__sflush_r+0x90>
 8000ea2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000ea4:	89a3      	ldrh	r3, [r4, #12]
 8000ea6:	0759      	lsls	r1, r3, #29
 8000ea8:	d505      	bpl.n	8000eb6 <__sflush_r+0x42>
 8000eaa:	6863      	ldr	r3, [r4, #4]
 8000eac:	1ad2      	subs	r2, r2, r3
 8000eae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000eb0:	b10b      	cbz	r3, 8000eb6 <__sflush_r+0x42>
 8000eb2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000eb4:	1ad2      	subs	r2, r2, r3
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000eba:	6a21      	ldr	r1, [r4, #32]
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	47b0      	blx	r6
 8000ec0:	1c43      	adds	r3, r0, #1
 8000ec2:	89a3      	ldrh	r3, [r4, #12]
 8000ec4:	d106      	bne.n	8000ed4 <__sflush_r+0x60>
 8000ec6:	6829      	ldr	r1, [r5, #0]
 8000ec8:	291d      	cmp	r1, #29
 8000eca:	d82b      	bhi.n	8000f24 <__sflush_r+0xb0>
 8000ecc:	4a28      	ldr	r2, [pc, #160]	@ (8000f70 <__sflush_r+0xfc>)
 8000ece:	410a      	asrs	r2, r1
 8000ed0:	07d6      	lsls	r6, r2, #31
 8000ed2:	d427      	bmi.n	8000f24 <__sflush_r+0xb0>
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	6062      	str	r2, [r4, #4]
 8000ed8:	04d9      	lsls	r1, r3, #19
 8000eda:	6922      	ldr	r2, [r4, #16]
 8000edc:	6022      	str	r2, [r4, #0]
 8000ede:	d504      	bpl.n	8000eea <__sflush_r+0x76>
 8000ee0:	1c42      	adds	r2, r0, #1
 8000ee2:	d101      	bne.n	8000ee8 <__sflush_r+0x74>
 8000ee4:	682b      	ldr	r3, [r5, #0]
 8000ee6:	b903      	cbnz	r3, 8000eea <__sflush_r+0x76>
 8000ee8:	6560      	str	r0, [r4, #84]	@ 0x54
 8000eea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000eec:	602f      	str	r7, [r5, #0]
 8000eee:	b1b9      	cbz	r1, 8000f20 <__sflush_r+0xac>
 8000ef0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000ef4:	4299      	cmp	r1, r3
 8000ef6:	d002      	beq.n	8000efe <__sflush_r+0x8a>
 8000ef8:	4628      	mov	r0, r5
 8000efa:	f7ff fec3 	bl	8000c84 <_free_r>
 8000efe:	2300      	movs	r3, #0
 8000f00:	6363      	str	r3, [r4, #52]	@ 0x34
 8000f02:	e00d      	b.n	8000f20 <__sflush_r+0xac>
 8000f04:	2301      	movs	r3, #1
 8000f06:	4628      	mov	r0, r5
 8000f08:	47b0      	blx	r6
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	1c50      	adds	r0, r2, #1
 8000f0e:	d1c9      	bne.n	8000ea4 <__sflush_r+0x30>
 8000f10:	682b      	ldr	r3, [r5, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0c6      	beq.n	8000ea4 <__sflush_r+0x30>
 8000f16:	2b1d      	cmp	r3, #29
 8000f18:	d001      	beq.n	8000f1e <__sflush_r+0xaa>
 8000f1a:	2b16      	cmp	r3, #22
 8000f1c:	d11d      	bne.n	8000f5a <__sflush_r+0xe6>
 8000f1e:	602f      	str	r7, [r5, #0]
 8000f20:	2000      	movs	r0, #0
 8000f22:	e021      	b.n	8000f68 <__sflush_r+0xf4>
 8000f24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f28:	b21b      	sxth	r3, r3
 8000f2a:	e01a      	b.n	8000f62 <__sflush_r+0xee>
 8000f2c:	690f      	ldr	r7, [r1, #16]
 8000f2e:	2f00      	cmp	r7, #0
 8000f30:	d0f6      	beq.n	8000f20 <__sflush_r+0xac>
 8000f32:	0793      	lsls	r3, r2, #30
 8000f34:	680e      	ldr	r6, [r1, #0]
 8000f36:	bf08      	it	eq
 8000f38:	694b      	ldreq	r3, [r1, #20]
 8000f3a:	600f      	str	r7, [r1, #0]
 8000f3c:	bf18      	it	ne
 8000f3e:	2300      	movne	r3, #0
 8000f40:	1bf6      	subs	r6, r6, r7
 8000f42:	608b      	str	r3, [r1, #8]
 8000f44:	2e00      	cmp	r6, #0
 8000f46:	ddeb      	ble.n	8000f20 <__sflush_r+0xac>
 8000f48:	6a21      	ldr	r1, [r4, #32]
 8000f4a:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8000f4e:	4633      	mov	r3, r6
 8000f50:	463a      	mov	r2, r7
 8000f52:	4628      	mov	r0, r5
 8000f54:	47e0      	blx	ip
 8000f56:	2800      	cmp	r0, #0
 8000f58:	dc07      	bgt.n	8000f6a <__sflush_r+0xf6>
 8000f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f62:	81a3      	strh	r3, [r4, #12]
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f6a:	4407      	add	r7, r0
 8000f6c:	1a36      	subs	r6, r6, r0
 8000f6e:	e7e9      	b.n	8000f44 <__sflush_r+0xd0>
 8000f70:	dfbffffe 	.word	0xdfbffffe

08000f74 <_fflush_r>:
 8000f74:	b538      	push	{r3, r4, r5, lr}
 8000f76:	690b      	ldr	r3, [r1, #16]
 8000f78:	4605      	mov	r5, r0
 8000f7a:	460c      	mov	r4, r1
 8000f7c:	b913      	cbnz	r3, 8000f84 <_fflush_r+0x10>
 8000f7e:	2500      	movs	r5, #0
 8000f80:	4628      	mov	r0, r5
 8000f82:	bd38      	pop	{r3, r4, r5, pc}
 8000f84:	b118      	cbz	r0, 8000f8e <_fflush_r+0x1a>
 8000f86:	6a03      	ldr	r3, [r0, #32]
 8000f88:	b90b      	cbnz	r3, 8000f8e <_fflush_r+0x1a>
 8000f8a:	f7ff fc93 	bl	80008b4 <__sinit>
 8000f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0f3      	beq.n	8000f7e <_fflush_r+0xa>
 8000f96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000f98:	07d0      	lsls	r0, r2, #31
 8000f9a:	d404      	bmi.n	8000fa6 <_fflush_r+0x32>
 8000f9c:	0599      	lsls	r1, r3, #22
 8000f9e:	d402      	bmi.n	8000fa6 <_fflush_r+0x32>
 8000fa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000fa2:	f7ff fe6c 	bl	8000c7e <__retarget_lock_acquire_recursive>
 8000fa6:	4628      	mov	r0, r5
 8000fa8:	4621      	mov	r1, r4
 8000faa:	f7ff ff63 	bl	8000e74 <__sflush_r>
 8000fae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000fb0:	07da      	lsls	r2, r3, #31
 8000fb2:	4605      	mov	r5, r0
 8000fb4:	d4e4      	bmi.n	8000f80 <_fflush_r+0xc>
 8000fb6:	89a3      	ldrh	r3, [r4, #12]
 8000fb8:	059b      	lsls	r3, r3, #22
 8000fba:	d4e1      	bmi.n	8000f80 <_fflush_r+0xc>
 8000fbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000fbe:	f7ff fe5f 	bl	8000c80 <__retarget_lock_release_recursive>
 8000fc2:	e7dd      	b.n	8000f80 <_fflush_r+0xc>

08000fc4 <__swhatbuf_r>:
 8000fc4:	b570      	push	{r4, r5, r6, lr}
 8000fc6:	460c      	mov	r4, r1
 8000fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fcc:	2900      	cmp	r1, #0
 8000fce:	b096      	sub	sp, #88	@ 0x58
 8000fd0:	4615      	mov	r5, r2
 8000fd2:	461e      	mov	r6, r3
 8000fd4:	da0d      	bge.n	8000ff2 <__swhatbuf_r+0x2e>
 8000fd6:	89a3      	ldrh	r3, [r4, #12]
 8000fd8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000fdc:	f04f 0100 	mov.w	r1, #0
 8000fe0:	bf14      	ite	ne
 8000fe2:	2340      	movne	r3, #64	@ 0x40
 8000fe4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000fe8:	2000      	movs	r0, #0
 8000fea:	6031      	str	r1, [r6, #0]
 8000fec:	602b      	str	r3, [r5, #0]
 8000fee:	b016      	add	sp, #88	@ 0x58
 8000ff0:	bd70      	pop	{r4, r5, r6, pc}
 8000ff2:	466a      	mov	r2, sp
 8000ff4:	f000 f848 	bl	8001088 <_fstat_r>
 8000ff8:	2800      	cmp	r0, #0
 8000ffa:	dbec      	blt.n	8000fd6 <__swhatbuf_r+0x12>
 8000ffc:	9901      	ldr	r1, [sp, #4]
 8000ffe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001002:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001006:	4259      	negs	r1, r3
 8001008:	4159      	adcs	r1, r3
 800100a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800100e:	e7eb      	b.n	8000fe8 <__swhatbuf_r+0x24>

08001010 <__smakebuf_r>:
 8001010:	898b      	ldrh	r3, [r1, #12]
 8001012:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001014:	079d      	lsls	r5, r3, #30
 8001016:	4606      	mov	r6, r0
 8001018:	460c      	mov	r4, r1
 800101a:	d507      	bpl.n	800102c <__smakebuf_r+0x1c>
 800101c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001020:	6023      	str	r3, [r4, #0]
 8001022:	6123      	str	r3, [r4, #16]
 8001024:	2301      	movs	r3, #1
 8001026:	6163      	str	r3, [r4, #20]
 8001028:	b003      	add	sp, #12
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	ab01      	add	r3, sp, #4
 800102e:	466a      	mov	r2, sp
 8001030:	f7ff ffc8 	bl	8000fc4 <__swhatbuf_r>
 8001034:	9f00      	ldr	r7, [sp, #0]
 8001036:	4605      	mov	r5, r0
 8001038:	4639      	mov	r1, r7
 800103a:	4630      	mov	r0, r6
 800103c:	f7ff fe8e 	bl	8000d5c <_malloc_r>
 8001040:	b948      	cbnz	r0, 8001056 <__smakebuf_r+0x46>
 8001042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001046:	059a      	lsls	r2, r3, #22
 8001048:	d4ee      	bmi.n	8001028 <__smakebuf_r+0x18>
 800104a:	f023 0303 	bic.w	r3, r3, #3
 800104e:	f043 0302 	orr.w	r3, r3, #2
 8001052:	81a3      	strh	r3, [r4, #12]
 8001054:	e7e2      	b.n	800101c <__smakebuf_r+0xc>
 8001056:	89a3      	ldrh	r3, [r4, #12]
 8001058:	6020      	str	r0, [r4, #0]
 800105a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800105e:	81a3      	strh	r3, [r4, #12]
 8001060:	9b01      	ldr	r3, [sp, #4]
 8001062:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001066:	b15b      	cbz	r3, 8001080 <__smakebuf_r+0x70>
 8001068:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800106c:	4630      	mov	r0, r6
 800106e:	f000 f81d 	bl	80010ac <_isatty_r>
 8001072:	b128      	cbz	r0, 8001080 <__smakebuf_r+0x70>
 8001074:	89a3      	ldrh	r3, [r4, #12]
 8001076:	f023 0303 	bic.w	r3, r3, #3
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	81a3      	strh	r3, [r4, #12]
 8001080:	89a3      	ldrh	r3, [r4, #12]
 8001082:	431d      	orrs	r5, r3
 8001084:	81a5      	strh	r5, [r4, #12]
 8001086:	e7cf      	b.n	8001028 <__smakebuf_r+0x18>

08001088 <_fstat_r>:
 8001088:	b538      	push	{r3, r4, r5, lr}
 800108a:	4d07      	ldr	r5, [pc, #28]	@ (80010a8 <_fstat_r+0x20>)
 800108c:	2300      	movs	r3, #0
 800108e:	4604      	mov	r4, r0
 8001090:	4608      	mov	r0, r1
 8001092:	4611      	mov	r1, r2
 8001094:	602b      	str	r3, [r5, #0]
 8001096:	f7ff fafb 	bl	8000690 <_fstat>
 800109a:	1c43      	adds	r3, r0, #1
 800109c:	d102      	bne.n	80010a4 <_fstat_r+0x1c>
 800109e:	682b      	ldr	r3, [r5, #0]
 80010a0:	b103      	cbz	r3, 80010a4 <_fstat_r+0x1c>
 80010a2:	6023      	str	r3, [r4, #0]
 80010a4:	bd38      	pop	{r3, r4, r5, pc}
 80010a6:	bf00      	nop
 80010a8:	200001dc 	.word	0x200001dc

080010ac <_isatty_r>:
 80010ac:	b538      	push	{r3, r4, r5, lr}
 80010ae:	4d06      	ldr	r5, [pc, #24]	@ (80010c8 <_isatty_r+0x1c>)
 80010b0:	2300      	movs	r3, #0
 80010b2:	4604      	mov	r4, r0
 80010b4:	4608      	mov	r0, r1
 80010b6:	602b      	str	r3, [r5, #0]
 80010b8:	f7ff faf9 	bl	80006ae <_isatty>
 80010bc:	1c43      	adds	r3, r0, #1
 80010be:	d102      	bne.n	80010c6 <_isatty_r+0x1a>
 80010c0:	682b      	ldr	r3, [r5, #0]
 80010c2:	b103      	cbz	r3, 80010c6 <_isatty_r+0x1a>
 80010c4:	6023      	str	r3, [r4, #0]
 80010c6:	bd38      	pop	{r3, r4, r5, pc}
 80010c8:	200001dc 	.word	0x200001dc

080010cc <_sbrk_r>:
 80010cc:	b538      	push	{r3, r4, r5, lr}
 80010ce:	4d06      	ldr	r5, [pc, #24]	@ (80010e8 <_sbrk_r+0x1c>)
 80010d0:	2300      	movs	r3, #0
 80010d2:	4604      	mov	r4, r0
 80010d4:	4608      	mov	r0, r1
 80010d6:	602b      	str	r3, [r5, #0]
 80010d8:	f7ff fb00 	bl	80006dc <_sbrk>
 80010dc:	1c43      	adds	r3, r0, #1
 80010de:	d102      	bne.n	80010e6 <_sbrk_r+0x1a>
 80010e0:	682b      	ldr	r3, [r5, #0]
 80010e2:	b103      	cbz	r3, 80010e6 <_sbrk_r+0x1a>
 80010e4:	6023      	str	r3, [r4, #0]
 80010e6:	bd38      	pop	{r3, r4, r5, pc}
 80010e8:	200001dc 	.word	0x200001dc

080010ec <_init>:
 80010ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ee:	bf00      	nop
 80010f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010f2:	bc08      	pop	{r3}
 80010f4:	469e      	mov	lr, r3
 80010f6:	4770      	bx	lr

080010f8 <_fini>:
 80010f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010fa:	bf00      	nop
 80010fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010fe:	bc08      	pop	{r3}
 8001100:	469e      	mov	lr, r3
 8001102:	4770      	bx	lr
