
SVC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012a4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08001444  08001444  00002444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014d0  080014d0  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  080014d0  080014d0  000024d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080014d8  080014d8  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014d8  080014d8  000024d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080014dc  080014dc  000024dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080014e0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  0800153c  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  0800153c  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b06  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003d2  00000000  00000000  00003b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000148  00000000  00000000  00003f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000e3  00000000  00000000  000040a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002cbe  00000000  00000000  0000418b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000017f5  00000000  00000000  00006e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009803  00000000  00000000  0000863e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00011e41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000be0  00000000  00000000  00011e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00012a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800142c 	.word	0x0800142c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800142c 	.word	0x0800142c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <SVC_Add_func>:


void SVC_Handler_c(uint32_t *pBaseOfStackFrame);

int32_t SVC_Add_func(int32_t x, int32_t y)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	6039      	str	r1, [r7, #0]
	int32_t res;
	__asm volatile("SVC #36");
 800028a:	df24      	svc	36	@ 0x24
	__asm volatile("MOV %0, R0":"=r"(res)::);
 800028c:	4603      	mov	r3, r0
 800028e:	60fb      	str	r3, [r7, #12]
	return res;
 8000290:	68fb      	ldr	r3, [r7, #12]
}
 8000292:	4618      	mov	r0, r3
 8000294:	3714      	adds	r7, #20
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr

0800029c <SVC_Sub_func>:

int32_t SVC_Sub_func(int32_t x, int32_t y)
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
 80002a4:	6039      	str	r1, [r7, #0]
	int32_t res;
	__asm volatile("SVC #37");
 80002a6:	df25      	svc	37	@ 0x25
	__asm volatile("MOV %0, R0":"=r"(res)::);
 80002a8:	4603      	mov	r3, r0
 80002aa:	60fb      	str	r3, [r7, #12]
	return res;
 80002ac:	68fb      	ldr	r3, [r7, #12]
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	3714      	adds	r7, #20
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr

080002b8 <SVC_Mul_func>:
int32_t SVC_Mul_func(int32_t x, int32_t y)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b085      	sub	sp, #20
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
 80002c0:	6039      	str	r1, [r7, #0]
	int32_t res;
	__asm volatile("SVC #38");
 80002c2:	df26      	svc	38	@ 0x26
	__asm volatile("MOV %0, R0":"=r"(res)::);
 80002c4:	4603      	mov	r3, r0
 80002c6:	60fb      	str	r3, [r7, #12]
	return res;
 80002c8:	68fb      	ldr	r3, [r7, #12]
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	3714      	adds	r7, #20
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr

080002d4 <SVC_Div_func>:
int32_t SVC_Div_func(int32_t x, int32_t y)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b085      	sub	sp, #20
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	6039      	str	r1, [r7, #0]
	int32_t res;
	__asm volatile("SVC #39");
 80002de:	df27      	svc	39	@ 0x27
	__asm volatile("MOV %0, R0":"=r"(res)::);
 80002e0:	4603      	mov	r3, r0
 80002e2:	60fb      	str	r3, [r7, #12]
	return res;
 80002e4:	68fb      	ldr	r3, [r7, #12]
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	3714      	adds	r7, #20
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr

080002f0 <main>:

int main(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
	int32_t res;

	res = SVC_Add_func(10, -90);
 80002f6:	f06f 0159 	mvn.w	r1, #89	@ 0x59
 80002fa:	200a      	movs	r0, #10
 80002fc:	f7ff ffc0 	bl	8000280 <SVC_Add_func>
 8000300:	6078      	str	r0, [r7, #4]
	printf("add res = %ld\n",res);
 8000302:	6879      	ldr	r1, [r7, #4]
 8000304:	4810      	ldr	r0, [pc, #64]	@ (8000348 <main+0x58>)
 8000306:	f000 fa29 	bl	800075c <iprintf>
	res = SVC_Sub_func(10, 20);
 800030a:	2114      	movs	r1, #20
 800030c:	200a      	movs	r0, #10
 800030e:	f7ff ffc5 	bl	800029c <SVC_Sub_func>
 8000312:	6078      	str	r0, [r7, #4]
	printf("sub res = %ld\n",res);
 8000314:	6879      	ldr	r1, [r7, #4]
 8000316:	480d      	ldr	r0, [pc, #52]	@ (800034c <main+0x5c>)
 8000318:	f000 fa20 	bl	800075c <iprintf>
	res = SVC_Mul_func(10, 20);
 800031c:	2114      	movs	r1, #20
 800031e:	200a      	movs	r0, #10
 8000320:	f7ff ffca 	bl	80002b8 <SVC_Mul_func>
 8000324:	6078      	str	r0, [r7, #4]
	printf("mul res = %ld\n",res);
 8000326:	6879      	ldr	r1, [r7, #4]
 8000328:	4809      	ldr	r0, [pc, #36]	@ (8000350 <main+0x60>)
 800032a:	f000 fa17 	bl	800075c <iprintf>
	res = SVC_Div_func(100,-20 );
 800032e:	f06f 0113 	mvn.w	r1, #19
 8000332:	2064      	movs	r0, #100	@ 0x64
 8000334:	f7ff ffce 	bl	80002d4 <SVC_Div_func>
 8000338:	6078      	str	r0, [r7, #4]
	printf("div res = %ld\n",res);
 800033a:	6879      	ldr	r1, [r7, #4]
 800033c:	4805      	ldr	r0, [pc, #20]	@ (8000354 <main+0x64>)
 800033e:	f000 fa0d 	bl	800075c <iprintf>
	for(;;);
 8000342:	bf00      	nop
 8000344:	e7fd      	b.n	8000342 <main+0x52>
 8000346:	bf00      	nop
 8000348:	08001444 	.word	0x08001444
 800034c:	08001454 	.word	0x08001454
 8000350:	08001464 	.word	0x08001464
 8000354:	08001474 	.word	0x08001474

08000358 <SVC_Handler>:

__attribute__ ((naked)) void SVC_Handler(void)
{
	//Extract SVC Number
	//1. Get MSP value
	__asm("MRS R0, MSP");
 8000358:	f3ef 8008 	mrs	r0, MSP
	__asm("B SVC_Handler_c");//R0 will be copy to argument 0
 800035c:	f000 b802 	b.w	8000364 <SVC_Handler_c>
}
 8000360:	bf00      	nop
	...

08000364 <SVC_Handler_c>:

void SVC_Handler_c(uint32_t *pBaseOfStackFrame)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b088      	sub	sp, #32
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	//2. Subtract MSP value by 6 to get PC(return address) value
	uint8_t *pReturn_addr = (uint8_t*)pBaseOfStackFrame[6];
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3318      	adds	r3, #24
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	61bb      	str	r3, [r7, #24]

	int32_t x,y,result;
	x = pBaseOfStackFrame[0];
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	617b      	str	r3, [r7, #20]
	y = pBaseOfStackFrame[1];
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	3304      	adds	r3, #4
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	613b      	str	r3, [r7, #16]
	//3. Minus PC value by 2 to get SVC number because SVC number is right before return address when SVC Handler is done

	uint32_t *pSVC_number = (uint32_t*)(pReturn_addr - 2);
 8000382:	69bb      	ldr	r3, [r7, #24]
 8000384:	3b02      	subs	r3, #2
 8000386:	60fb      	str	r3, [r7, #12]
	uint8_t SVC_number =(uint8_t)((*pSVC_number) & 0xFF);
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	72fb      	strb	r3, [r7, #11]
	switch (SVC_number)
 800038e:	7afb      	ldrb	r3, [r7, #11]
 8000390:	3b24      	subs	r3, #36	@ 0x24
 8000392:	2b03      	cmp	r3, #3
 8000394:	d820      	bhi.n	80003d8 <SVC_Handler_c+0x74>
 8000396:	a201      	add	r2, pc, #4	@ (adr r2, 800039c <SVC_Handler_c+0x38>)
 8000398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800039c:	080003ad 	.word	0x080003ad
 80003a0:	080003b7 	.word	0x080003b7
 80003a4:	080003c1 	.word	0x080003c1
 80003a8:	080003cd 	.word	0x080003cd
	{
		case 36:
			result = x + y;
 80003ac:	697a      	ldr	r2, [r7, #20]
 80003ae:	693b      	ldr	r3, [r7, #16]
 80003b0:	4413      	add	r3, r2
 80003b2:	61fb      	str	r3, [r7, #28]
			break;
 80003b4:	e016      	b.n	80003e4 <SVC_Handler_c+0x80>
		case 37:
			result = x - y;
 80003b6:	697a      	ldr	r2, [r7, #20]
 80003b8:	693b      	ldr	r3, [r7, #16]
 80003ba:	1ad3      	subs	r3, r2, r3
 80003bc:	61fb      	str	r3, [r7, #28]
			break;
 80003be:	e011      	b.n	80003e4 <SVC_Handler_c+0x80>
		case 38:
			result = x * y;
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	693a      	ldr	r2, [r7, #16]
 80003c4:	fb02 f303 	mul.w	r3, r2, r3
 80003c8:	61fb      	str	r3, [r7, #28]
			break;
 80003ca:	e00b      	b.n	80003e4 <SVC_Handler_c+0x80>
		case 39:
			result = x / y;
 80003cc:	697a      	ldr	r2, [r7, #20]
 80003ce:	693b      	ldr	r3, [r7, #16]
 80003d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80003d4:	61fb      	str	r3, [r7, #28]
			break;
 80003d6:	e005      	b.n	80003e4 <SVC_Handler_c+0x80>
		default:
			printf("Invalid SVC number: %d?\n",SVC_number);
 80003d8:	7afb      	ldrb	r3, [r7, #11]
 80003da:	4619      	mov	r1, r3
 80003dc:	4805      	ldr	r0, [pc, #20]	@ (80003f4 <SVC_Handler_c+0x90>)
 80003de:	f000 f9bd 	bl	800075c <iprintf>
			break;
 80003e2:	bf00      	nop
	}
		pBaseOfStackFrame[0] = result;
 80003e4:	69fa      	ldr	r2, [r7, #28]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	601a      	str	r2, [r3, #0]
}
 80003ea:	bf00      	nop
 80003ec:	3720      	adds	r7, #32
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	08001484 	.word	0x08001484

080003f8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000402:	4b0e      	ldr	r3, [pc, #56]	@ (800043c <ITM_SendChar+0x44>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4a0d      	ldr	r2, [pc, #52]	@ (800043c <ITM_SendChar+0x44>)
 8000408:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800040c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800040e:	4b0c      	ldr	r3, [pc, #48]	@ (8000440 <ITM_SendChar+0x48>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a0b      	ldr	r2, [pc, #44]	@ (8000440 <ITM_SendChar+0x48>)
 8000414:	f043 0301 	orr.w	r3, r3, #1
 8000418:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800041a:	bf00      	nop
 800041c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	2b00      	cmp	r3, #0
 8000428:	d0f8      	beq.n	800041c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800042a:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800042e:	79fb      	ldrb	r3, [r7, #7]
 8000430:	6013      	str	r3, [r2, #0]
}
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	e000edfc 	.word	0xe000edfc
 8000440:	e0000e00 	.word	0xe0000e00

08000444 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
 800044a:	60f8      	str	r0, [r7, #12]
 800044c:	60b9      	str	r1, [r7, #8]
 800044e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]
 8000454:	e00a      	b.n	800046c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000456:	f3af 8000 	nop.w
 800045a:	4601      	mov	r1, r0
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	1c5a      	adds	r2, r3, #1
 8000460:	60ba      	str	r2, [r7, #8]
 8000462:	b2ca      	uxtb	r2, r1
 8000464:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	3301      	adds	r3, #1
 800046a:	617b      	str	r3, [r7, #20]
 800046c:	697a      	ldr	r2, [r7, #20]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	429a      	cmp	r2, r3
 8000472:	dbf0      	blt.n	8000456 <_read+0x12>
  }

  return len;
 8000474:	687b      	ldr	r3, [r7, #4]
}
 8000476:	4618      	mov	r0, r3
 8000478:	3718      	adds	r7, #24
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}

0800047e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800047e:	b580      	push	{r7, lr}
 8000480:	b086      	sub	sp, #24
 8000482:	af00      	add	r7, sp, #0
 8000484:	60f8      	str	r0, [r7, #12]
 8000486:	60b9      	str	r1, [r7, #8]
 8000488:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800048a:	2300      	movs	r3, #0
 800048c:	617b      	str	r3, [r7, #20]
 800048e:	e009      	b.n	80004a4 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	1c5a      	adds	r2, r3, #1
 8000494:	60ba      	str	r2, [r7, #8]
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff ffad 	bl	80003f8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	3301      	adds	r3, #1
 80004a2:	617b      	str	r3, [r7, #20]
 80004a4:	697a      	ldr	r2, [r7, #20]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	429a      	cmp	r2, r3
 80004aa:	dbf1      	blt.n	8000490 <_write+0x12>
  }
  return len;
 80004ac:	687b      	ldr	r3, [r7, #4]
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3718      	adds	r7, #24
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <_close>:

int _close(int file)
{
 80004b6:	b480      	push	{r7}
 80004b8:	b083      	sub	sp, #12
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr

080004cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004dc:	605a      	str	r2, [r3, #4]
  return 0;
 80004de:	2300      	movs	r3, #0
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr

080004ea <_isatty>:

int _isatty(int file)
{
 80004ea:	b480      	push	{r7}
 80004ec:	b083      	sub	sp, #12
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004f2:	2301      	movs	r3, #1
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr

080004fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004fe:	b480      	push	{r7}
 8000500:	b085      	sub	sp, #20
 8000502:	af00      	add	r7, sp, #0
 8000504:	60f8      	str	r0, [r7, #12]
 8000506:	60b9      	str	r1, [r7, #8]
 8000508:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800050a:	2300      	movs	r3, #0
}
 800050c:	4618      	mov	r0, r3
 800050e:	3714      	adds	r7, #20
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr
	...

08000518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b086      	sub	sp, #24
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000520:	4a14      	ldr	r2, [pc, #80]	@ (8000574 <_sbrk+0x5c>)
 8000522:	4b15      	ldr	r3, [pc, #84]	@ (8000578 <_sbrk+0x60>)
 8000524:	1ad3      	subs	r3, r2, r3
 8000526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800052c:	4b13      	ldr	r3, [pc, #76]	@ (800057c <_sbrk+0x64>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d102      	bne.n	800053a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000534:	4b11      	ldr	r3, [pc, #68]	@ (800057c <_sbrk+0x64>)
 8000536:	4a12      	ldr	r2, [pc, #72]	@ (8000580 <_sbrk+0x68>)
 8000538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800053a:	4b10      	ldr	r3, [pc, #64]	@ (800057c <_sbrk+0x64>)
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4413      	add	r3, r2
 8000542:	693a      	ldr	r2, [r7, #16]
 8000544:	429a      	cmp	r2, r3
 8000546:	d207      	bcs.n	8000558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000548:	f000 f9ac 	bl	80008a4 <__errno>
 800054c:	4603      	mov	r3, r0
 800054e:	220c      	movs	r2, #12
 8000550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000552:	f04f 33ff 	mov.w	r3, #4294967295
 8000556:	e009      	b.n	800056c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000558:	4b08      	ldr	r3, [pc, #32]	@ (800057c <_sbrk+0x64>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800055e:	4b07      	ldr	r3, [pc, #28]	@ (800057c <_sbrk+0x64>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4413      	add	r3, r2
 8000566:	4a05      	ldr	r2, [pc, #20]	@ (800057c <_sbrk+0x64>)
 8000568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800056a:	68fb      	ldr	r3, [r7, #12]
}
 800056c:	4618      	mov	r0, r3
 800056e:	3718      	adds	r7, #24
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20020000 	.word	0x20020000
 8000578:	00000400 	.word	0x00000400
 800057c:	20000078 	.word	0x20000078
 8000580:	200001c8 	.word	0x200001c8

08000584 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000584:	480d      	ldr	r0, [pc, #52]	@ (80005bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000586:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000588:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800058c:	480c      	ldr	r0, [pc, #48]	@ (80005c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800058e:	490d      	ldr	r1, [pc, #52]	@ (80005c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000590:	4a0d      	ldr	r2, [pc, #52]	@ (80005c8 <LoopForever+0xe>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000594:	e002      	b.n	800059c <LoopCopyDataInit>

08000596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059a:	3304      	adds	r3, #4

0800059c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800059c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800059e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a0:	d3f9      	bcc.n	8000596 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a2:	4a0a      	ldr	r2, [pc, #40]	@ (80005cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80005a4:	4c0a      	ldr	r4, [pc, #40]	@ (80005d0 <LoopForever+0x16>)
  movs r3, #0
 80005a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a8:	e001      	b.n	80005ae <LoopFillZerobss>

080005aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ac:	3204      	adds	r2, #4

080005ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b0:	d3fb      	bcc.n	80005aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005b2:	f000 f97d 	bl	80008b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005b6:	f7ff fe9b 	bl	80002f0 <main>

080005ba <LoopForever>:

LoopForever:
  b LoopForever
 80005ba:	e7fe      	b.n	80005ba <LoopForever>
  ldr   r0, =_estack
 80005bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005c8:	080014e0 	.word	0x080014e0
  ldr r2, =_sbss
 80005cc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80005d0:	200001c8 	.word	0x200001c8

080005d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d4:	e7fe      	b.n	80005d4 <ADC_IRQHandler>
	...

080005d8 <std>:
 80005d8:	2300      	movs	r3, #0
 80005da:	b510      	push	{r4, lr}
 80005dc:	4604      	mov	r4, r0
 80005de:	e9c0 3300 	strd	r3, r3, [r0]
 80005e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80005e6:	6083      	str	r3, [r0, #8]
 80005e8:	8181      	strh	r1, [r0, #12]
 80005ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80005ec:	81c2      	strh	r2, [r0, #14]
 80005ee:	6183      	str	r3, [r0, #24]
 80005f0:	4619      	mov	r1, r3
 80005f2:	2208      	movs	r2, #8
 80005f4:	305c      	adds	r0, #92	@ 0x5c
 80005f6:	f000 f906 	bl	8000806 <memset>
 80005fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000630 <std+0x58>)
 80005fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80005fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000634 <std+0x5c>)
 8000600:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000602:	4b0d      	ldr	r3, [pc, #52]	@ (8000638 <std+0x60>)
 8000604:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000606:	4b0d      	ldr	r3, [pc, #52]	@ (800063c <std+0x64>)
 8000608:	6323      	str	r3, [r4, #48]	@ 0x30
 800060a:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <std+0x68>)
 800060c:	6224      	str	r4, [r4, #32]
 800060e:	429c      	cmp	r4, r3
 8000610:	d006      	beq.n	8000620 <std+0x48>
 8000612:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000616:	4294      	cmp	r4, r2
 8000618:	d002      	beq.n	8000620 <std+0x48>
 800061a:	33d0      	adds	r3, #208	@ 0xd0
 800061c:	429c      	cmp	r4, r3
 800061e:	d105      	bne.n	800062c <std+0x54>
 8000620:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000628:	f000 b966 	b.w	80008f8 <__retarget_lock_init_recursive>
 800062c:	bd10      	pop	{r4, pc}
 800062e:	bf00      	nop
 8000630:	08000781 	.word	0x08000781
 8000634:	080007a3 	.word	0x080007a3
 8000638:	080007db 	.word	0x080007db
 800063c:	080007ff 	.word	0x080007ff
 8000640:	2000007c 	.word	0x2000007c

08000644 <stdio_exit_handler>:
 8000644:	4a02      	ldr	r2, [pc, #8]	@ (8000650 <stdio_exit_handler+0xc>)
 8000646:	4903      	ldr	r1, [pc, #12]	@ (8000654 <stdio_exit_handler+0x10>)
 8000648:	4803      	ldr	r0, [pc, #12]	@ (8000658 <stdio_exit_handler+0x14>)
 800064a:	f000 b869 	b.w	8000720 <_fwalk_sglue>
 800064e:	bf00      	nop
 8000650:	20000000 	.word	0x20000000
 8000654:	0800118d 	.word	0x0800118d
 8000658:	20000010 	.word	0x20000010

0800065c <cleanup_stdio>:
 800065c:	6841      	ldr	r1, [r0, #4]
 800065e:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <cleanup_stdio+0x34>)
 8000660:	4299      	cmp	r1, r3
 8000662:	b510      	push	{r4, lr}
 8000664:	4604      	mov	r4, r0
 8000666:	d001      	beq.n	800066c <cleanup_stdio+0x10>
 8000668:	f000 fd90 	bl	800118c <_fflush_r>
 800066c:	68a1      	ldr	r1, [r4, #8]
 800066e:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <cleanup_stdio+0x38>)
 8000670:	4299      	cmp	r1, r3
 8000672:	d002      	beq.n	800067a <cleanup_stdio+0x1e>
 8000674:	4620      	mov	r0, r4
 8000676:	f000 fd89 	bl	800118c <_fflush_r>
 800067a:	68e1      	ldr	r1, [r4, #12]
 800067c:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <cleanup_stdio+0x3c>)
 800067e:	4299      	cmp	r1, r3
 8000680:	d004      	beq.n	800068c <cleanup_stdio+0x30>
 8000682:	4620      	mov	r0, r4
 8000684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000688:	f000 bd80 	b.w	800118c <_fflush_r>
 800068c:	bd10      	pop	{r4, pc}
 800068e:	bf00      	nop
 8000690:	2000007c 	.word	0x2000007c
 8000694:	200000e4 	.word	0x200000e4
 8000698:	2000014c 	.word	0x2000014c

0800069c <global_stdio_init.part.0>:
 800069c:	b510      	push	{r4, lr}
 800069e:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <global_stdio_init.part.0+0x30>)
 80006a0:	4c0b      	ldr	r4, [pc, #44]	@ (80006d0 <global_stdio_init.part.0+0x34>)
 80006a2:	4a0c      	ldr	r2, [pc, #48]	@ (80006d4 <global_stdio_init.part.0+0x38>)
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	4620      	mov	r0, r4
 80006a8:	2200      	movs	r2, #0
 80006aa:	2104      	movs	r1, #4
 80006ac:	f7ff ff94 	bl	80005d8 <std>
 80006b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80006b4:	2201      	movs	r2, #1
 80006b6:	2109      	movs	r1, #9
 80006b8:	f7ff ff8e 	bl	80005d8 <std>
 80006bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80006c0:	2202      	movs	r2, #2
 80006c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006c6:	2112      	movs	r1, #18
 80006c8:	f7ff bf86 	b.w	80005d8 <std>
 80006cc:	200001b4 	.word	0x200001b4
 80006d0:	2000007c 	.word	0x2000007c
 80006d4:	08000645 	.word	0x08000645

080006d8 <__sfp_lock_acquire>:
 80006d8:	4801      	ldr	r0, [pc, #4]	@ (80006e0 <__sfp_lock_acquire+0x8>)
 80006da:	f000 b90e 	b.w	80008fa <__retarget_lock_acquire_recursive>
 80006de:	bf00      	nop
 80006e0:	200001bd 	.word	0x200001bd

080006e4 <__sfp_lock_release>:
 80006e4:	4801      	ldr	r0, [pc, #4]	@ (80006ec <__sfp_lock_release+0x8>)
 80006e6:	f000 b909 	b.w	80008fc <__retarget_lock_release_recursive>
 80006ea:	bf00      	nop
 80006ec:	200001bd 	.word	0x200001bd

080006f0 <__sinit>:
 80006f0:	b510      	push	{r4, lr}
 80006f2:	4604      	mov	r4, r0
 80006f4:	f7ff fff0 	bl	80006d8 <__sfp_lock_acquire>
 80006f8:	6a23      	ldr	r3, [r4, #32]
 80006fa:	b11b      	cbz	r3, 8000704 <__sinit+0x14>
 80006fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000700:	f7ff bff0 	b.w	80006e4 <__sfp_lock_release>
 8000704:	4b04      	ldr	r3, [pc, #16]	@ (8000718 <__sinit+0x28>)
 8000706:	6223      	str	r3, [r4, #32]
 8000708:	4b04      	ldr	r3, [pc, #16]	@ (800071c <__sinit+0x2c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d1f5      	bne.n	80006fc <__sinit+0xc>
 8000710:	f7ff ffc4 	bl	800069c <global_stdio_init.part.0>
 8000714:	e7f2      	b.n	80006fc <__sinit+0xc>
 8000716:	bf00      	nop
 8000718:	0800065d 	.word	0x0800065d
 800071c:	200001b4 	.word	0x200001b4

08000720 <_fwalk_sglue>:
 8000720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000724:	4607      	mov	r7, r0
 8000726:	4688      	mov	r8, r1
 8000728:	4614      	mov	r4, r2
 800072a:	2600      	movs	r6, #0
 800072c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000730:	f1b9 0901 	subs.w	r9, r9, #1
 8000734:	d505      	bpl.n	8000742 <_fwalk_sglue+0x22>
 8000736:	6824      	ldr	r4, [r4, #0]
 8000738:	2c00      	cmp	r4, #0
 800073a:	d1f7      	bne.n	800072c <_fwalk_sglue+0xc>
 800073c:	4630      	mov	r0, r6
 800073e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000742:	89ab      	ldrh	r3, [r5, #12]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d907      	bls.n	8000758 <_fwalk_sglue+0x38>
 8000748:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800074c:	3301      	adds	r3, #1
 800074e:	d003      	beq.n	8000758 <_fwalk_sglue+0x38>
 8000750:	4629      	mov	r1, r5
 8000752:	4638      	mov	r0, r7
 8000754:	47c0      	blx	r8
 8000756:	4306      	orrs	r6, r0
 8000758:	3568      	adds	r5, #104	@ 0x68
 800075a:	e7e9      	b.n	8000730 <_fwalk_sglue+0x10>

0800075c <iprintf>:
 800075c:	b40f      	push	{r0, r1, r2, r3}
 800075e:	b507      	push	{r0, r1, r2, lr}
 8000760:	4906      	ldr	r1, [pc, #24]	@ (800077c <iprintf+0x20>)
 8000762:	ab04      	add	r3, sp, #16
 8000764:	6808      	ldr	r0, [r1, #0]
 8000766:	f853 2b04 	ldr.w	r2, [r3], #4
 800076a:	6881      	ldr	r1, [r0, #8]
 800076c:	9301      	str	r3, [sp, #4]
 800076e:	f000 f9e7 	bl	8000b40 <_vfiprintf_r>
 8000772:	b003      	add	sp, #12
 8000774:	f85d eb04 	ldr.w	lr, [sp], #4
 8000778:	b004      	add	sp, #16
 800077a:	4770      	bx	lr
 800077c:	2000000c 	.word	0x2000000c

08000780 <__sread>:
 8000780:	b510      	push	{r4, lr}
 8000782:	460c      	mov	r4, r1
 8000784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000788:	f000 f868 	bl	800085c <_read_r>
 800078c:	2800      	cmp	r0, #0
 800078e:	bfab      	itete	ge
 8000790:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000792:	89a3      	ldrhlt	r3, [r4, #12]
 8000794:	181b      	addge	r3, r3, r0
 8000796:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800079a:	bfac      	ite	ge
 800079c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800079e:	81a3      	strhlt	r3, [r4, #12]
 80007a0:	bd10      	pop	{r4, pc}

080007a2 <__swrite>:
 80007a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007a6:	461f      	mov	r7, r3
 80007a8:	898b      	ldrh	r3, [r1, #12]
 80007aa:	05db      	lsls	r3, r3, #23
 80007ac:	4605      	mov	r5, r0
 80007ae:	460c      	mov	r4, r1
 80007b0:	4616      	mov	r6, r2
 80007b2:	d505      	bpl.n	80007c0 <__swrite+0x1e>
 80007b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007b8:	2302      	movs	r3, #2
 80007ba:	2200      	movs	r2, #0
 80007bc:	f000 f83c 	bl	8000838 <_lseek_r>
 80007c0:	89a3      	ldrh	r3, [r4, #12]
 80007c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80007c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007ca:	81a3      	strh	r3, [r4, #12]
 80007cc:	4632      	mov	r2, r6
 80007ce:	463b      	mov	r3, r7
 80007d0:	4628      	mov	r0, r5
 80007d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80007d6:	f000 b853 	b.w	8000880 <_write_r>

080007da <__sseek>:
 80007da:	b510      	push	{r4, lr}
 80007dc:	460c      	mov	r4, r1
 80007de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007e2:	f000 f829 	bl	8000838 <_lseek_r>
 80007e6:	1c43      	adds	r3, r0, #1
 80007e8:	89a3      	ldrh	r3, [r4, #12]
 80007ea:	bf15      	itete	ne
 80007ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80007ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80007f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80007f6:	81a3      	strheq	r3, [r4, #12]
 80007f8:	bf18      	it	ne
 80007fa:	81a3      	strhne	r3, [r4, #12]
 80007fc:	bd10      	pop	{r4, pc}

080007fe <__sclose>:
 80007fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000802:	f000 b809 	b.w	8000818 <_close_r>

08000806 <memset>:
 8000806:	4402      	add	r2, r0
 8000808:	4603      	mov	r3, r0
 800080a:	4293      	cmp	r3, r2
 800080c:	d100      	bne.n	8000810 <memset+0xa>
 800080e:	4770      	bx	lr
 8000810:	f803 1b01 	strb.w	r1, [r3], #1
 8000814:	e7f9      	b.n	800080a <memset+0x4>
	...

08000818 <_close_r>:
 8000818:	b538      	push	{r3, r4, r5, lr}
 800081a:	4d06      	ldr	r5, [pc, #24]	@ (8000834 <_close_r+0x1c>)
 800081c:	2300      	movs	r3, #0
 800081e:	4604      	mov	r4, r0
 8000820:	4608      	mov	r0, r1
 8000822:	602b      	str	r3, [r5, #0]
 8000824:	f7ff fe47 	bl	80004b6 <_close>
 8000828:	1c43      	adds	r3, r0, #1
 800082a:	d102      	bne.n	8000832 <_close_r+0x1a>
 800082c:	682b      	ldr	r3, [r5, #0]
 800082e:	b103      	cbz	r3, 8000832 <_close_r+0x1a>
 8000830:	6023      	str	r3, [r4, #0]
 8000832:	bd38      	pop	{r3, r4, r5, pc}
 8000834:	200001b8 	.word	0x200001b8

08000838 <_lseek_r>:
 8000838:	b538      	push	{r3, r4, r5, lr}
 800083a:	4d07      	ldr	r5, [pc, #28]	@ (8000858 <_lseek_r+0x20>)
 800083c:	4604      	mov	r4, r0
 800083e:	4608      	mov	r0, r1
 8000840:	4611      	mov	r1, r2
 8000842:	2200      	movs	r2, #0
 8000844:	602a      	str	r2, [r5, #0]
 8000846:	461a      	mov	r2, r3
 8000848:	f7ff fe59 	bl	80004fe <_lseek>
 800084c:	1c43      	adds	r3, r0, #1
 800084e:	d102      	bne.n	8000856 <_lseek_r+0x1e>
 8000850:	682b      	ldr	r3, [r5, #0]
 8000852:	b103      	cbz	r3, 8000856 <_lseek_r+0x1e>
 8000854:	6023      	str	r3, [r4, #0]
 8000856:	bd38      	pop	{r3, r4, r5, pc}
 8000858:	200001b8 	.word	0x200001b8

0800085c <_read_r>:
 800085c:	b538      	push	{r3, r4, r5, lr}
 800085e:	4d07      	ldr	r5, [pc, #28]	@ (800087c <_read_r+0x20>)
 8000860:	4604      	mov	r4, r0
 8000862:	4608      	mov	r0, r1
 8000864:	4611      	mov	r1, r2
 8000866:	2200      	movs	r2, #0
 8000868:	602a      	str	r2, [r5, #0]
 800086a:	461a      	mov	r2, r3
 800086c:	f7ff fdea 	bl	8000444 <_read>
 8000870:	1c43      	adds	r3, r0, #1
 8000872:	d102      	bne.n	800087a <_read_r+0x1e>
 8000874:	682b      	ldr	r3, [r5, #0]
 8000876:	b103      	cbz	r3, 800087a <_read_r+0x1e>
 8000878:	6023      	str	r3, [r4, #0]
 800087a:	bd38      	pop	{r3, r4, r5, pc}
 800087c:	200001b8 	.word	0x200001b8

08000880 <_write_r>:
 8000880:	b538      	push	{r3, r4, r5, lr}
 8000882:	4d07      	ldr	r5, [pc, #28]	@ (80008a0 <_write_r+0x20>)
 8000884:	4604      	mov	r4, r0
 8000886:	4608      	mov	r0, r1
 8000888:	4611      	mov	r1, r2
 800088a:	2200      	movs	r2, #0
 800088c:	602a      	str	r2, [r5, #0]
 800088e:	461a      	mov	r2, r3
 8000890:	f7ff fdf5 	bl	800047e <_write>
 8000894:	1c43      	adds	r3, r0, #1
 8000896:	d102      	bne.n	800089e <_write_r+0x1e>
 8000898:	682b      	ldr	r3, [r5, #0]
 800089a:	b103      	cbz	r3, 800089e <_write_r+0x1e>
 800089c:	6023      	str	r3, [r4, #0]
 800089e:	bd38      	pop	{r3, r4, r5, pc}
 80008a0:	200001b8 	.word	0x200001b8

080008a4 <__errno>:
 80008a4:	4b01      	ldr	r3, [pc, #4]	@ (80008ac <__errno+0x8>)
 80008a6:	6818      	ldr	r0, [r3, #0]
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	2000000c 	.word	0x2000000c

080008b0 <__libc_init_array>:
 80008b0:	b570      	push	{r4, r5, r6, lr}
 80008b2:	4d0d      	ldr	r5, [pc, #52]	@ (80008e8 <__libc_init_array+0x38>)
 80008b4:	4c0d      	ldr	r4, [pc, #52]	@ (80008ec <__libc_init_array+0x3c>)
 80008b6:	1b64      	subs	r4, r4, r5
 80008b8:	10a4      	asrs	r4, r4, #2
 80008ba:	2600      	movs	r6, #0
 80008bc:	42a6      	cmp	r6, r4
 80008be:	d109      	bne.n	80008d4 <__libc_init_array+0x24>
 80008c0:	4d0b      	ldr	r5, [pc, #44]	@ (80008f0 <__libc_init_array+0x40>)
 80008c2:	4c0c      	ldr	r4, [pc, #48]	@ (80008f4 <__libc_init_array+0x44>)
 80008c4:	f000 fdb2 	bl	800142c <_init>
 80008c8:	1b64      	subs	r4, r4, r5
 80008ca:	10a4      	asrs	r4, r4, #2
 80008cc:	2600      	movs	r6, #0
 80008ce:	42a6      	cmp	r6, r4
 80008d0:	d105      	bne.n	80008de <__libc_init_array+0x2e>
 80008d2:	bd70      	pop	{r4, r5, r6, pc}
 80008d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80008d8:	4798      	blx	r3
 80008da:	3601      	adds	r6, #1
 80008dc:	e7ee      	b.n	80008bc <__libc_init_array+0xc>
 80008de:	f855 3b04 	ldr.w	r3, [r5], #4
 80008e2:	4798      	blx	r3
 80008e4:	3601      	adds	r6, #1
 80008e6:	e7f2      	b.n	80008ce <__libc_init_array+0x1e>
 80008e8:	080014d8 	.word	0x080014d8
 80008ec:	080014d8 	.word	0x080014d8
 80008f0:	080014d8 	.word	0x080014d8
 80008f4:	080014dc 	.word	0x080014dc

080008f8 <__retarget_lock_init_recursive>:
 80008f8:	4770      	bx	lr

080008fa <__retarget_lock_acquire_recursive>:
 80008fa:	4770      	bx	lr

080008fc <__retarget_lock_release_recursive>:
 80008fc:	4770      	bx	lr
	...

08000900 <_free_r>:
 8000900:	b538      	push	{r3, r4, r5, lr}
 8000902:	4605      	mov	r5, r0
 8000904:	2900      	cmp	r1, #0
 8000906:	d041      	beq.n	800098c <_free_r+0x8c>
 8000908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800090c:	1f0c      	subs	r4, r1, #4
 800090e:	2b00      	cmp	r3, #0
 8000910:	bfb8      	it	lt
 8000912:	18e4      	addlt	r4, r4, r3
 8000914:	f000 f8e0 	bl	8000ad8 <__malloc_lock>
 8000918:	4a1d      	ldr	r2, [pc, #116]	@ (8000990 <_free_r+0x90>)
 800091a:	6813      	ldr	r3, [r2, #0]
 800091c:	b933      	cbnz	r3, 800092c <_free_r+0x2c>
 800091e:	6063      	str	r3, [r4, #4]
 8000920:	6014      	str	r4, [r2, #0]
 8000922:	4628      	mov	r0, r5
 8000924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000928:	f000 b8dc 	b.w	8000ae4 <__malloc_unlock>
 800092c:	42a3      	cmp	r3, r4
 800092e:	d908      	bls.n	8000942 <_free_r+0x42>
 8000930:	6820      	ldr	r0, [r4, #0]
 8000932:	1821      	adds	r1, r4, r0
 8000934:	428b      	cmp	r3, r1
 8000936:	bf01      	itttt	eq
 8000938:	6819      	ldreq	r1, [r3, #0]
 800093a:	685b      	ldreq	r3, [r3, #4]
 800093c:	1809      	addeq	r1, r1, r0
 800093e:	6021      	streq	r1, [r4, #0]
 8000940:	e7ed      	b.n	800091e <_free_r+0x1e>
 8000942:	461a      	mov	r2, r3
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	b10b      	cbz	r3, 800094c <_free_r+0x4c>
 8000948:	42a3      	cmp	r3, r4
 800094a:	d9fa      	bls.n	8000942 <_free_r+0x42>
 800094c:	6811      	ldr	r1, [r2, #0]
 800094e:	1850      	adds	r0, r2, r1
 8000950:	42a0      	cmp	r0, r4
 8000952:	d10b      	bne.n	800096c <_free_r+0x6c>
 8000954:	6820      	ldr	r0, [r4, #0]
 8000956:	4401      	add	r1, r0
 8000958:	1850      	adds	r0, r2, r1
 800095a:	4283      	cmp	r3, r0
 800095c:	6011      	str	r1, [r2, #0]
 800095e:	d1e0      	bne.n	8000922 <_free_r+0x22>
 8000960:	6818      	ldr	r0, [r3, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	6053      	str	r3, [r2, #4]
 8000966:	4408      	add	r0, r1
 8000968:	6010      	str	r0, [r2, #0]
 800096a:	e7da      	b.n	8000922 <_free_r+0x22>
 800096c:	d902      	bls.n	8000974 <_free_r+0x74>
 800096e:	230c      	movs	r3, #12
 8000970:	602b      	str	r3, [r5, #0]
 8000972:	e7d6      	b.n	8000922 <_free_r+0x22>
 8000974:	6820      	ldr	r0, [r4, #0]
 8000976:	1821      	adds	r1, r4, r0
 8000978:	428b      	cmp	r3, r1
 800097a:	bf04      	itt	eq
 800097c:	6819      	ldreq	r1, [r3, #0]
 800097e:	685b      	ldreq	r3, [r3, #4]
 8000980:	6063      	str	r3, [r4, #4]
 8000982:	bf04      	itt	eq
 8000984:	1809      	addeq	r1, r1, r0
 8000986:	6021      	streq	r1, [r4, #0]
 8000988:	6054      	str	r4, [r2, #4]
 800098a:	e7ca      	b.n	8000922 <_free_r+0x22>
 800098c:	bd38      	pop	{r3, r4, r5, pc}
 800098e:	bf00      	nop
 8000990:	200001c4 	.word	0x200001c4

08000994 <sbrk_aligned>:
 8000994:	b570      	push	{r4, r5, r6, lr}
 8000996:	4e0f      	ldr	r6, [pc, #60]	@ (80009d4 <sbrk_aligned+0x40>)
 8000998:	460c      	mov	r4, r1
 800099a:	6831      	ldr	r1, [r6, #0]
 800099c:	4605      	mov	r5, r0
 800099e:	b911      	cbnz	r1, 80009a6 <sbrk_aligned+0x12>
 80009a0:	f000 fcb0 	bl	8001304 <_sbrk_r>
 80009a4:	6030      	str	r0, [r6, #0]
 80009a6:	4621      	mov	r1, r4
 80009a8:	4628      	mov	r0, r5
 80009aa:	f000 fcab 	bl	8001304 <_sbrk_r>
 80009ae:	1c43      	adds	r3, r0, #1
 80009b0:	d103      	bne.n	80009ba <sbrk_aligned+0x26>
 80009b2:	f04f 34ff 	mov.w	r4, #4294967295
 80009b6:	4620      	mov	r0, r4
 80009b8:	bd70      	pop	{r4, r5, r6, pc}
 80009ba:	1cc4      	adds	r4, r0, #3
 80009bc:	f024 0403 	bic.w	r4, r4, #3
 80009c0:	42a0      	cmp	r0, r4
 80009c2:	d0f8      	beq.n	80009b6 <sbrk_aligned+0x22>
 80009c4:	1a21      	subs	r1, r4, r0
 80009c6:	4628      	mov	r0, r5
 80009c8:	f000 fc9c 	bl	8001304 <_sbrk_r>
 80009cc:	3001      	adds	r0, #1
 80009ce:	d1f2      	bne.n	80009b6 <sbrk_aligned+0x22>
 80009d0:	e7ef      	b.n	80009b2 <sbrk_aligned+0x1e>
 80009d2:	bf00      	nop
 80009d4:	200001c0 	.word	0x200001c0

080009d8 <_malloc_r>:
 80009d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009dc:	1ccd      	adds	r5, r1, #3
 80009de:	f025 0503 	bic.w	r5, r5, #3
 80009e2:	3508      	adds	r5, #8
 80009e4:	2d0c      	cmp	r5, #12
 80009e6:	bf38      	it	cc
 80009e8:	250c      	movcc	r5, #12
 80009ea:	2d00      	cmp	r5, #0
 80009ec:	4606      	mov	r6, r0
 80009ee:	db01      	blt.n	80009f4 <_malloc_r+0x1c>
 80009f0:	42a9      	cmp	r1, r5
 80009f2:	d904      	bls.n	80009fe <_malloc_r+0x26>
 80009f4:	230c      	movs	r3, #12
 80009f6:	6033      	str	r3, [r6, #0]
 80009f8:	2000      	movs	r0, #0
 80009fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000ad4 <_malloc_r+0xfc>
 8000a02:	f000 f869 	bl	8000ad8 <__malloc_lock>
 8000a06:	f8d8 3000 	ldr.w	r3, [r8]
 8000a0a:	461c      	mov	r4, r3
 8000a0c:	bb44      	cbnz	r4, 8000a60 <_malloc_r+0x88>
 8000a0e:	4629      	mov	r1, r5
 8000a10:	4630      	mov	r0, r6
 8000a12:	f7ff ffbf 	bl	8000994 <sbrk_aligned>
 8000a16:	1c43      	adds	r3, r0, #1
 8000a18:	4604      	mov	r4, r0
 8000a1a:	d158      	bne.n	8000ace <_malloc_r+0xf6>
 8000a1c:	f8d8 4000 	ldr.w	r4, [r8]
 8000a20:	4627      	mov	r7, r4
 8000a22:	2f00      	cmp	r7, #0
 8000a24:	d143      	bne.n	8000aae <_malloc_r+0xd6>
 8000a26:	2c00      	cmp	r4, #0
 8000a28:	d04b      	beq.n	8000ac2 <_malloc_r+0xea>
 8000a2a:	6823      	ldr	r3, [r4, #0]
 8000a2c:	4639      	mov	r1, r7
 8000a2e:	4630      	mov	r0, r6
 8000a30:	eb04 0903 	add.w	r9, r4, r3
 8000a34:	f000 fc66 	bl	8001304 <_sbrk_r>
 8000a38:	4581      	cmp	r9, r0
 8000a3a:	d142      	bne.n	8000ac2 <_malloc_r+0xea>
 8000a3c:	6821      	ldr	r1, [r4, #0]
 8000a3e:	1a6d      	subs	r5, r5, r1
 8000a40:	4629      	mov	r1, r5
 8000a42:	4630      	mov	r0, r6
 8000a44:	f7ff ffa6 	bl	8000994 <sbrk_aligned>
 8000a48:	3001      	adds	r0, #1
 8000a4a:	d03a      	beq.n	8000ac2 <_malloc_r+0xea>
 8000a4c:	6823      	ldr	r3, [r4, #0]
 8000a4e:	442b      	add	r3, r5
 8000a50:	6023      	str	r3, [r4, #0]
 8000a52:	f8d8 3000 	ldr.w	r3, [r8]
 8000a56:	685a      	ldr	r2, [r3, #4]
 8000a58:	bb62      	cbnz	r2, 8000ab4 <_malloc_r+0xdc>
 8000a5a:	f8c8 7000 	str.w	r7, [r8]
 8000a5e:	e00f      	b.n	8000a80 <_malloc_r+0xa8>
 8000a60:	6822      	ldr	r2, [r4, #0]
 8000a62:	1b52      	subs	r2, r2, r5
 8000a64:	d420      	bmi.n	8000aa8 <_malloc_r+0xd0>
 8000a66:	2a0b      	cmp	r2, #11
 8000a68:	d917      	bls.n	8000a9a <_malloc_r+0xc2>
 8000a6a:	1961      	adds	r1, r4, r5
 8000a6c:	42a3      	cmp	r3, r4
 8000a6e:	6025      	str	r5, [r4, #0]
 8000a70:	bf18      	it	ne
 8000a72:	6059      	strne	r1, [r3, #4]
 8000a74:	6863      	ldr	r3, [r4, #4]
 8000a76:	bf08      	it	eq
 8000a78:	f8c8 1000 	streq.w	r1, [r8]
 8000a7c:	5162      	str	r2, [r4, r5]
 8000a7e:	604b      	str	r3, [r1, #4]
 8000a80:	4630      	mov	r0, r6
 8000a82:	f000 f82f 	bl	8000ae4 <__malloc_unlock>
 8000a86:	f104 000b 	add.w	r0, r4, #11
 8000a8a:	1d23      	adds	r3, r4, #4
 8000a8c:	f020 0007 	bic.w	r0, r0, #7
 8000a90:	1ac2      	subs	r2, r0, r3
 8000a92:	bf1c      	itt	ne
 8000a94:	1a1b      	subne	r3, r3, r0
 8000a96:	50a3      	strne	r3, [r4, r2]
 8000a98:	e7af      	b.n	80009fa <_malloc_r+0x22>
 8000a9a:	6862      	ldr	r2, [r4, #4]
 8000a9c:	42a3      	cmp	r3, r4
 8000a9e:	bf0c      	ite	eq
 8000aa0:	f8c8 2000 	streq.w	r2, [r8]
 8000aa4:	605a      	strne	r2, [r3, #4]
 8000aa6:	e7eb      	b.n	8000a80 <_malloc_r+0xa8>
 8000aa8:	4623      	mov	r3, r4
 8000aaa:	6864      	ldr	r4, [r4, #4]
 8000aac:	e7ae      	b.n	8000a0c <_malloc_r+0x34>
 8000aae:	463c      	mov	r4, r7
 8000ab0:	687f      	ldr	r7, [r7, #4]
 8000ab2:	e7b6      	b.n	8000a22 <_malloc_r+0x4a>
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	42a3      	cmp	r3, r4
 8000aba:	d1fb      	bne.n	8000ab4 <_malloc_r+0xdc>
 8000abc:	2300      	movs	r3, #0
 8000abe:	6053      	str	r3, [r2, #4]
 8000ac0:	e7de      	b.n	8000a80 <_malloc_r+0xa8>
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	6033      	str	r3, [r6, #0]
 8000ac6:	4630      	mov	r0, r6
 8000ac8:	f000 f80c 	bl	8000ae4 <__malloc_unlock>
 8000acc:	e794      	b.n	80009f8 <_malloc_r+0x20>
 8000ace:	6005      	str	r5, [r0, #0]
 8000ad0:	e7d6      	b.n	8000a80 <_malloc_r+0xa8>
 8000ad2:	bf00      	nop
 8000ad4:	200001c4 	.word	0x200001c4

08000ad8 <__malloc_lock>:
 8000ad8:	4801      	ldr	r0, [pc, #4]	@ (8000ae0 <__malloc_lock+0x8>)
 8000ada:	f7ff bf0e 	b.w	80008fa <__retarget_lock_acquire_recursive>
 8000ade:	bf00      	nop
 8000ae0:	200001bc 	.word	0x200001bc

08000ae4 <__malloc_unlock>:
 8000ae4:	4801      	ldr	r0, [pc, #4]	@ (8000aec <__malloc_unlock+0x8>)
 8000ae6:	f7ff bf09 	b.w	80008fc <__retarget_lock_release_recursive>
 8000aea:	bf00      	nop
 8000aec:	200001bc 	.word	0x200001bc

08000af0 <__sfputc_r>:
 8000af0:	6893      	ldr	r3, [r2, #8]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	b410      	push	{r4}
 8000af8:	6093      	str	r3, [r2, #8]
 8000afa:	da07      	bge.n	8000b0c <__sfputc_r+0x1c>
 8000afc:	6994      	ldr	r4, [r2, #24]
 8000afe:	42a3      	cmp	r3, r4
 8000b00:	db01      	blt.n	8000b06 <__sfputc_r+0x16>
 8000b02:	290a      	cmp	r1, #10
 8000b04:	d102      	bne.n	8000b0c <__sfputc_r+0x1c>
 8000b06:	bc10      	pop	{r4}
 8000b08:	f000 bb68 	b.w	80011dc <__swbuf_r>
 8000b0c:	6813      	ldr	r3, [r2, #0]
 8000b0e:	1c58      	adds	r0, r3, #1
 8000b10:	6010      	str	r0, [r2, #0]
 8000b12:	7019      	strb	r1, [r3, #0]
 8000b14:	4608      	mov	r0, r1
 8000b16:	bc10      	pop	{r4}
 8000b18:	4770      	bx	lr

08000b1a <__sfputs_r>:
 8000b1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b1c:	4606      	mov	r6, r0
 8000b1e:	460f      	mov	r7, r1
 8000b20:	4614      	mov	r4, r2
 8000b22:	18d5      	adds	r5, r2, r3
 8000b24:	42ac      	cmp	r4, r5
 8000b26:	d101      	bne.n	8000b2c <__sfputs_r+0x12>
 8000b28:	2000      	movs	r0, #0
 8000b2a:	e007      	b.n	8000b3c <__sfputs_r+0x22>
 8000b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b30:	463a      	mov	r2, r7
 8000b32:	4630      	mov	r0, r6
 8000b34:	f7ff ffdc 	bl	8000af0 <__sfputc_r>
 8000b38:	1c43      	adds	r3, r0, #1
 8000b3a:	d1f3      	bne.n	8000b24 <__sfputs_r+0xa>
 8000b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000b40 <_vfiprintf_r>:
 8000b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b44:	460d      	mov	r5, r1
 8000b46:	b09d      	sub	sp, #116	@ 0x74
 8000b48:	4614      	mov	r4, r2
 8000b4a:	4698      	mov	r8, r3
 8000b4c:	4606      	mov	r6, r0
 8000b4e:	b118      	cbz	r0, 8000b58 <_vfiprintf_r+0x18>
 8000b50:	6a03      	ldr	r3, [r0, #32]
 8000b52:	b90b      	cbnz	r3, 8000b58 <_vfiprintf_r+0x18>
 8000b54:	f7ff fdcc 	bl	80006f0 <__sinit>
 8000b58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000b5a:	07d9      	lsls	r1, r3, #31
 8000b5c:	d405      	bmi.n	8000b6a <_vfiprintf_r+0x2a>
 8000b5e:	89ab      	ldrh	r3, [r5, #12]
 8000b60:	059a      	lsls	r2, r3, #22
 8000b62:	d402      	bmi.n	8000b6a <_vfiprintf_r+0x2a>
 8000b64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000b66:	f7ff fec8 	bl	80008fa <__retarget_lock_acquire_recursive>
 8000b6a:	89ab      	ldrh	r3, [r5, #12]
 8000b6c:	071b      	lsls	r3, r3, #28
 8000b6e:	d501      	bpl.n	8000b74 <_vfiprintf_r+0x34>
 8000b70:	692b      	ldr	r3, [r5, #16]
 8000b72:	b99b      	cbnz	r3, 8000b9c <_vfiprintf_r+0x5c>
 8000b74:	4629      	mov	r1, r5
 8000b76:	4630      	mov	r0, r6
 8000b78:	f000 fb6e 	bl	8001258 <__swsetup_r>
 8000b7c:	b170      	cbz	r0, 8000b9c <_vfiprintf_r+0x5c>
 8000b7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000b80:	07dc      	lsls	r4, r3, #31
 8000b82:	d504      	bpl.n	8000b8e <_vfiprintf_r+0x4e>
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	b01d      	add	sp, #116	@ 0x74
 8000b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b8e:	89ab      	ldrh	r3, [r5, #12]
 8000b90:	0598      	lsls	r0, r3, #22
 8000b92:	d4f7      	bmi.n	8000b84 <_vfiprintf_r+0x44>
 8000b94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000b96:	f7ff feb1 	bl	80008fc <__retarget_lock_release_recursive>
 8000b9a:	e7f3      	b.n	8000b84 <_vfiprintf_r+0x44>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ba0:	2320      	movs	r3, #32
 8000ba2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000ba6:	f8cd 800c 	str.w	r8, [sp, #12]
 8000baa:	2330      	movs	r3, #48	@ 0x30
 8000bac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000d5c <_vfiprintf_r+0x21c>
 8000bb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000bb4:	f04f 0901 	mov.w	r9, #1
 8000bb8:	4623      	mov	r3, r4
 8000bba:	469a      	mov	sl, r3
 8000bbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000bc0:	b10a      	cbz	r2, 8000bc6 <_vfiprintf_r+0x86>
 8000bc2:	2a25      	cmp	r2, #37	@ 0x25
 8000bc4:	d1f9      	bne.n	8000bba <_vfiprintf_r+0x7a>
 8000bc6:	ebba 0b04 	subs.w	fp, sl, r4
 8000bca:	d00b      	beq.n	8000be4 <_vfiprintf_r+0xa4>
 8000bcc:	465b      	mov	r3, fp
 8000bce:	4622      	mov	r2, r4
 8000bd0:	4629      	mov	r1, r5
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	f7ff ffa1 	bl	8000b1a <__sfputs_r>
 8000bd8:	3001      	adds	r0, #1
 8000bda:	f000 80a7 	beq.w	8000d2c <_vfiprintf_r+0x1ec>
 8000bde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000be0:	445a      	add	r2, fp
 8000be2:	9209      	str	r2, [sp, #36]	@ 0x24
 8000be4:	f89a 3000 	ldrb.w	r3, [sl]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	f000 809f 	beq.w	8000d2c <_vfiprintf_r+0x1ec>
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000bf8:	f10a 0a01 	add.w	sl, sl, #1
 8000bfc:	9304      	str	r3, [sp, #16]
 8000bfe:	9307      	str	r3, [sp, #28]
 8000c00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000c04:	931a      	str	r3, [sp, #104]	@ 0x68
 8000c06:	4654      	mov	r4, sl
 8000c08:	2205      	movs	r2, #5
 8000c0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c0e:	4853      	ldr	r0, [pc, #332]	@ (8000d5c <_vfiprintf_r+0x21c>)
 8000c10:	f7ff fae6 	bl	80001e0 <memchr>
 8000c14:	9a04      	ldr	r2, [sp, #16]
 8000c16:	b9d8      	cbnz	r0, 8000c50 <_vfiprintf_r+0x110>
 8000c18:	06d1      	lsls	r1, r2, #27
 8000c1a:	bf44      	itt	mi
 8000c1c:	2320      	movmi	r3, #32
 8000c1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000c22:	0713      	lsls	r3, r2, #28
 8000c24:	bf44      	itt	mi
 8000c26:	232b      	movmi	r3, #43	@ 0x2b
 8000c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000c2c:	f89a 3000 	ldrb.w	r3, [sl]
 8000c30:	2b2a      	cmp	r3, #42	@ 0x2a
 8000c32:	d015      	beq.n	8000c60 <_vfiprintf_r+0x120>
 8000c34:	9a07      	ldr	r2, [sp, #28]
 8000c36:	4654      	mov	r4, sl
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f04f 0c0a 	mov.w	ip, #10
 8000c3e:	4621      	mov	r1, r4
 8000c40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c44:	3b30      	subs	r3, #48	@ 0x30
 8000c46:	2b09      	cmp	r3, #9
 8000c48:	d94b      	bls.n	8000ce2 <_vfiprintf_r+0x1a2>
 8000c4a:	b1b0      	cbz	r0, 8000c7a <_vfiprintf_r+0x13a>
 8000c4c:	9207      	str	r2, [sp, #28]
 8000c4e:	e014      	b.n	8000c7a <_vfiprintf_r+0x13a>
 8000c50:	eba0 0308 	sub.w	r3, r0, r8
 8000c54:	fa09 f303 	lsl.w	r3, r9, r3
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	9304      	str	r3, [sp, #16]
 8000c5c:	46a2      	mov	sl, r4
 8000c5e:	e7d2      	b.n	8000c06 <_vfiprintf_r+0xc6>
 8000c60:	9b03      	ldr	r3, [sp, #12]
 8000c62:	1d19      	adds	r1, r3, #4
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	9103      	str	r1, [sp, #12]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	bfbb      	ittet	lt
 8000c6c:	425b      	neglt	r3, r3
 8000c6e:	f042 0202 	orrlt.w	r2, r2, #2
 8000c72:	9307      	strge	r3, [sp, #28]
 8000c74:	9307      	strlt	r3, [sp, #28]
 8000c76:	bfb8      	it	lt
 8000c78:	9204      	strlt	r2, [sp, #16]
 8000c7a:	7823      	ldrb	r3, [r4, #0]
 8000c7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8000c7e:	d10a      	bne.n	8000c96 <_vfiprintf_r+0x156>
 8000c80:	7863      	ldrb	r3, [r4, #1]
 8000c82:	2b2a      	cmp	r3, #42	@ 0x2a
 8000c84:	d132      	bne.n	8000cec <_vfiprintf_r+0x1ac>
 8000c86:	9b03      	ldr	r3, [sp, #12]
 8000c88:	1d1a      	adds	r2, r3, #4
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	9203      	str	r2, [sp, #12]
 8000c8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000c92:	3402      	adds	r4, #2
 8000c94:	9305      	str	r3, [sp, #20]
 8000c96:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8000d60 <_vfiprintf_r+0x220>
 8000c9a:	7821      	ldrb	r1, [r4, #0]
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	4650      	mov	r0, sl
 8000ca0:	f7ff fa9e 	bl	80001e0 <memchr>
 8000ca4:	b138      	cbz	r0, 8000cb6 <_vfiprintf_r+0x176>
 8000ca6:	9b04      	ldr	r3, [sp, #16]
 8000ca8:	eba0 000a 	sub.w	r0, r0, sl
 8000cac:	2240      	movs	r2, #64	@ 0x40
 8000cae:	4082      	lsls	r2, r0
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	3401      	adds	r4, #1
 8000cb4:	9304      	str	r3, [sp, #16]
 8000cb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cba:	482a      	ldr	r0, [pc, #168]	@ (8000d64 <_vfiprintf_r+0x224>)
 8000cbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000cc0:	2206      	movs	r2, #6
 8000cc2:	f7ff fa8d 	bl	80001e0 <memchr>
 8000cc6:	2800      	cmp	r0, #0
 8000cc8:	d03f      	beq.n	8000d4a <_vfiprintf_r+0x20a>
 8000cca:	4b27      	ldr	r3, [pc, #156]	@ (8000d68 <_vfiprintf_r+0x228>)
 8000ccc:	bb1b      	cbnz	r3, 8000d16 <_vfiprintf_r+0x1d6>
 8000cce:	9b03      	ldr	r3, [sp, #12]
 8000cd0:	3307      	adds	r3, #7
 8000cd2:	f023 0307 	bic.w	r3, r3, #7
 8000cd6:	3308      	adds	r3, #8
 8000cd8:	9303      	str	r3, [sp, #12]
 8000cda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000cdc:	443b      	add	r3, r7
 8000cde:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ce0:	e76a      	b.n	8000bb8 <_vfiprintf_r+0x78>
 8000ce2:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ce6:	460c      	mov	r4, r1
 8000ce8:	2001      	movs	r0, #1
 8000cea:	e7a8      	b.n	8000c3e <_vfiprintf_r+0xfe>
 8000cec:	2300      	movs	r3, #0
 8000cee:	3401      	adds	r4, #1
 8000cf0:	9305      	str	r3, [sp, #20]
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f04f 0c0a 	mov.w	ip, #10
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000cfe:	3a30      	subs	r2, #48	@ 0x30
 8000d00:	2a09      	cmp	r2, #9
 8000d02:	d903      	bls.n	8000d0c <_vfiprintf_r+0x1cc>
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d0c6      	beq.n	8000c96 <_vfiprintf_r+0x156>
 8000d08:	9105      	str	r1, [sp, #20]
 8000d0a:	e7c4      	b.n	8000c96 <_vfiprintf_r+0x156>
 8000d0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d10:	4604      	mov	r4, r0
 8000d12:	2301      	movs	r3, #1
 8000d14:	e7f0      	b.n	8000cf8 <_vfiprintf_r+0x1b8>
 8000d16:	ab03      	add	r3, sp, #12
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	462a      	mov	r2, r5
 8000d1c:	4b13      	ldr	r3, [pc, #76]	@ (8000d6c <_vfiprintf_r+0x22c>)
 8000d1e:	a904      	add	r1, sp, #16
 8000d20:	4630      	mov	r0, r6
 8000d22:	f3af 8000 	nop.w
 8000d26:	4607      	mov	r7, r0
 8000d28:	1c78      	adds	r0, r7, #1
 8000d2a:	d1d6      	bne.n	8000cda <_vfiprintf_r+0x19a>
 8000d2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d2e:	07d9      	lsls	r1, r3, #31
 8000d30:	d405      	bmi.n	8000d3e <_vfiprintf_r+0x1fe>
 8000d32:	89ab      	ldrh	r3, [r5, #12]
 8000d34:	059a      	lsls	r2, r3, #22
 8000d36:	d402      	bmi.n	8000d3e <_vfiprintf_r+0x1fe>
 8000d38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d3a:	f7ff fddf 	bl	80008fc <__retarget_lock_release_recursive>
 8000d3e:	89ab      	ldrh	r3, [r5, #12]
 8000d40:	065b      	lsls	r3, r3, #25
 8000d42:	f53f af1f 	bmi.w	8000b84 <_vfiprintf_r+0x44>
 8000d46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000d48:	e71e      	b.n	8000b88 <_vfiprintf_r+0x48>
 8000d4a:	ab03      	add	r3, sp, #12
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	462a      	mov	r2, r5
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <_vfiprintf_r+0x22c>)
 8000d52:	a904      	add	r1, sp, #16
 8000d54:	4630      	mov	r0, r6
 8000d56:	f000 f879 	bl	8000e4c <_printf_i>
 8000d5a:	e7e4      	b.n	8000d26 <_vfiprintf_r+0x1e6>
 8000d5c:	0800149d 	.word	0x0800149d
 8000d60:	080014a3 	.word	0x080014a3
 8000d64:	080014a7 	.word	0x080014a7
 8000d68:	00000000 	.word	0x00000000
 8000d6c:	08000b1b 	.word	0x08000b1b

08000d70 <_printf_common>:
 8000d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d74:	4616      	mov	r6, r2
 8000d76:	4698      	mov	r8, r3
 8000d78:	688a      	ldr	r2, [r1, #8]
 8000d7a:	690b      	ldr	r3, [r1, #16]
 8000d7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000d80:	4293      	cmp	r3, r2
 8000d82:	bfb8      	it	lt
 8000d84:	4613      	movlt	r3, r2
 8000d86:	6033      	str	r3, [r6, #0]
 8000d88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000d8c:	4607      	mov	r7, r0
 8000d8e:	460c      	mov	r4, r1
 8000d90:	b10a      	cbz	r2, 8000d96 <_printf_common+0x26>
 8000d92:	3301      	adds	r3, #1
 8000d94:	6033      	str	r3, [r6, #0]
 8000d96:	6823      	ldr	r3, [r4, #0]
 8000d98:	0699      	lsls	r1, r3, #26
 8000d9a:	bf42      	ittt	mi
 8000d9c:	6833      	ldrmi	r3, [r6, #0]
 8000d9e:	3302      	addmi	r3, #2
 8000da0:	6033      	strmi	r3, [r6, #0]
 8000da2:	6825      	ldr	r5, [r4, #0]
 8000da4:	f015 0506 	ands.w	r5, r5, #6
 8000da8:	d106      	bne.n	8000db8 <_printf_common+0x48>
 8000daa:	f104 0a19 	add.w	sl, r4, #25
 8000dae:	68e3      	ldr	r3, [r4, #12]
 8000db0:	6832      	ldr	r2, [r6, #0]
 8000db2:	1a9b      	subs	r3, r3, r2
 8000db4:	42ab      	cmp	r3, r5
 8000db6:	dc26      	bgt.n	8000e06 <_printf_common+0x96>
 8000db8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000dbc:	6822      	ldr	r2, [r4, #0]
 8000dbe:	3b00      	subs	r3, #0
 8000dc0:	bf18      	it	ne
 8000dc2:	2301      	movne	r3, #1
 8000dc4:	0692      	lsls	r2, r2, #26
 8000dc6:	d42b      	bmi.n	8000e20 <_printf_common+0xb0>
 8000dc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000dcc:	4641      	mov	r1, r8
 8000dce:	4638      	mov	r0, r7
 8000dd0:	47c8      	blx	r9
 8000dd2:	3001      	adds	r0, #1
 8000dd4:	d01e      	beq.n	8000e14 <_printf_common+0xa4>
 8000dd6:	6823      	ldr	r3, [r4, #0]
 8000dd8:	6922      	ldr	r2, [r4, #16]
 8000dda:	f003 0306 	and.w	r3, r3, #6
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	bf02      	ittt	eq
 8000de2:	68e5      	ldreq	r5, [r4, #12]
 8000de4:	6833      	ldreq	r3, [r6, #0]
 8000de6:	1aed      	subeq	r5, r5, r3
 8000de8:	68a3      	ldr	r3, [r4, #8]
 8000dea:	bf0c      	ite	eq
 8000dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000df0:	2500      	movne	r5, #0
 8000df2:	4293      	cmp	r3, r2
 8000df4:	bfc4      	itt	gt
 8000df6:	1a9b      	subgt	r3, r3, r2
 8000df8:	18ed      	addgt	r5, r5, r3
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	341a      	adds	r4, #26
 8000dfe:	42b5      	cmp	r5, r6
 8000e00:	d11a      	bne.n	8000e38 <_printf_common+0xc8>
 8000e02:	2000      	movs	r0, #0
 8000e04:	e008      	b.n	8000e18 <_printf_common+0xa8>
 8000e06:	2301      	movs	r3, #1
 8000e08:	4652      	mov	r2, sl
 8000e0a:	4641      	mov	r1, r8
 8000e0c:	4638      	mov	r0, r7
 8000e0e:	47c8      	blx	r9
 8000e10:	3001      	adds	r0, #1
 8000e12:	d103      	bne.n	8000e1c <_printf_common+0xac>
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
 8000e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1c:	3501      	adds	r5, #1
 8000e1e:	e7c6      	b.n	8000dae <_printf_common+0x3e>
 8000e20:	18e1      	adds	r1, r4, r3
 8000e22:	1c5a      	adds	r2, r3, #1
 8000e24:	2030      	movs	r0, #48	@ 0x30
 8000e26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000e2a:	4422      	add	r2, r4
 8000e2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000e30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000e34:	3302      	adds	r3, #2
 8000e36:	e7c7      	b.n	8000dc8 <_printf_common+0x58>
 8000e38:	2301      	movs	r3, #1
 8000e3a:	4622      	mov	r2, r4
 8000e3c:	4641      	mov	r1, r8
 8000e3e:	4638      	mov	r0, r7
 8000e40:	47c8      	blx	r9
 8000e42:	3001      	adds	r0, #1
 8000e44:	d0e6      	beq.n	8000e14 <_printf_common+0xa4>
 8000e46:	3601      	adds	r6, #1
 8000e48:	e7d9      	b.n	8000dfe <_printf_common+0x8e>
	...

08000e4c <_printf_i>:
 8000e4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e50:	7e0f      	ldrb	r7, [r1, #24]
 8000e52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000e54:	2f78      	cmp	r7, #120	@ 0x78
 8000e56:	4691      	mov	r9, r2
 8000e58:	4680      	mov	r8, r0
 8000e5a:	460c      	mov	r4, r1
 8000e5c:	469a      	mov	sl, r3
 8000e5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000e62:	d807      	bhi.n	8000e74 <_printf_i+0x28>
 8000e64:	2f62      	cmp	r7, #98	@ 0x62
 8000e66:	d80a      	bhi.n	8000e7e <_printf_i+0x32>
 8000e68:	2f00      	cmp	r7, #0
 8000e6a:	f000 80d2 	beq.w	8001012 <_printf_i+0x1c6>
 8000e6e:	2f58      	cmp	r7, #88	@ 0x58
 8000e70:	f000 80b9 	beq.w	8000fe6 <_printf_i+0x19a>
 8000e74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000e7c:	e03a      	b.n	8000ef4 <_printf_i+0xa8>
 8000e7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000e82:	2b15      	cmp	r3, #21
 8000e84:	d8f6      	bhi.n	8000e74 <_printf_i+0x28>
 8000e86:	a101      	add	r1, pc, #4	@ (adr r1, 8000e8c <_printf_i+0x40>)
 8000e88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e8c:	08000ee5 	.word	0x08000ee5
 8000e90:	08000ef9 	.word	0x08000ef9
 8000e94:	08000e75 	.word	0x08000e75
 8000e98:	08000e75 	.word	0x08000e75
 8000e9c:	08000e75 	.word	0x08000e75
 8000ea0:	08000e75 	.word	0x08000e75
 8000ea4:	08000ef9 	.word	0x08000ef9
 8000ea8:	08000e75 	.word	0x08000e75
 8000eac:	08000e75 	.word	0x08000e75
 8000eb0:	08000e75 	.word	0x08000e75
 8000eb4:	08000e75 	.word	0x08000e75
 8000eb8:	08000ff9 	.word	0x08000ff9
 8000ebc:	08000f23 	.word	0x08000f23
 8000ec0:	08000fb3 	.word	0x08000fb3
 8000ec4:	08000e75 	.word	0x08000e75
 8000ec8:	08000e75 	.word	0x08000e75
 8000ecc:	0800101b 	.word	0x0800101b
 8000ed0:	08000e75 	.word	0x08000e75
 8000ed4:	08000f23 	.word	0x08000f23
 8000ed8:	08000e75 	.word	0x08000e75
 8000edc:	08000e75 	.word	0x08000e75
 8000ee0:	08000fbb 	.word	0x08000fbb
 8000ee4:	6833      	ldr	r3, [r6, #0]
 8000ee6:	1d1a      	adds	r2, r3, #4
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6032      	str	r2, [r6, #0]
 8000eec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000ef0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e09d      	b.n	8001034 <_printf_i+0x1e8>
 8000ef8:	6833      	ldr	r3, [r6, #0]
 8000efa:	6820      	ldr	r0, [r4, #0]
 8000efc:	1d19      	adds	r1, r3, #4
 8000efe:	6031      	str	r1, [r6, #0]
 8000f00:	0606      	lsls	r6, r0, #24
 8000f02:	d501      	bpl.n	8000f08 <_printf_i+0xbc>
 8000f04:	681d      	ldr	r5, [r3, #0]
 8000f06:	e003      	b.n	8000f10 <_printf_i+0xc4>
 8000f08:	0645      	lsls	r5, r0, #25
 8000f0a:	d5fb      	bpl.n	8000f04 <_printf_i+0xb8>
 8000f0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000f10:	2d00      	cmp	r5, #0
 8000f12:	da03      	bge.n	8000f1c <_printf_i+0xd0>
 8000f14:	232d      	movs	r3, #45	@ 0x2d
 8000f16:	426d      	negs	r5, r5
 8000f18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f1c:	4859      	ldr	r0, [pc, #356]	@ (8001084 <_printf_i+0x238>)
 8000f1e:	230a      	movs	r3, #10
 8000f20:	e011      	b.n	8000f46 <_printf_i+0xfa>
 8000f22:	6821      	ldr	r1, [r4, #0]
 8000f24:	6833      	ldr	r3, [r6, #0]
 8000f26:	0608      	lsls	r0, r1, #24
 8000f28:	f853 5b04 	ldr.w	r5, [r3], #4
 8000f2c:	d402      	bmi.n	8000f34 <_printf_i+0xe8>
 8000f2e:	0649      	lsls	r1, r1, #25
 8000f30:	bf48      	it	mi
 8000f32:	b2ad      	uxthmi	r5, r5
 8000f34:	2f6f      	cmp	r7, #111	@ 0x6f
 8000f36:	4853      	ldr	r0, [pc, #332]	@ (8001084 <_printf_i+0x238>)
 8000f38:	6033      	str	r3, [r6, #0]
 8000f3a:	bf14      	ite	ne
 8000f3c:	230a      	movne	r3, #10
 8000f3e:	2308      	moveq	r3, #8
 8000f40:	2100      	movs	r1, #0
 8000f42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000f46:	6866      	ldr	r6, [r4, #4]
 8000f48:	60a6      	str	r6, [r4, #8]
 8000f4a:	2e00      	cmp	r6, #0
 8000f4c:	bfa2      	ittt	ge
 8000f4e:	6821      	ldrge	r1, [r4, #0]
 8000f50:	f021 0104 	bicge.w	r1, r1, #4
 8000f54:	6021      	strge	r1, [r4, #0]
 8000f56:	b90d      	cbnz	r5, 8000f5c <_printf_i+0x110>
 8000f58:	2e00      	cmp	r6, #0
 8000f5a:	d04b      	beq.n	8000ff4 <_printf_i+0x1a8>
 8000f5c:	4616      	mov	r6, r2
 8000f5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8000f62:	fb03 5711 	mls	r7, r3, r1, r5
 8000f66:	5dc7      	ldrb	r7, [r0, r7]
 8000f68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000f6c:	462f      	mov	r7, r5
 8000f6e:	42bb      	cmp	r3, r7
 8000f70:	460d      	mov	r5, r1
 8000f72:	d9f4      	bls.n	8000f5e <_printf_i+0x112>
 8000f74:	2b08      	cmp	r3, #8
 8000f76:	d10b      	bne.n	8000f90 <_printf_i+0x144>
 8000f78:	6823      	ldr	r3, [r4, #0]
 8000f7a:	07df      	lsls	r7, r3, #31
 8000f7c:	d508      	bpl.n	8000f90 <_printf_i+0x144>
 8000f7e:	6923      	ldr	r3, [r4, #16]
 8000f80:	6861      	ldr	r1, [r4, #4]
 8000f82:	4299      	cmp	r1, r3
 8000f84:	bfde      	ittt	le
 8000f86:	2330      	movle	r3, #48	@ 0x30
 8000f88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000f8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000f90:	1b92      	subs	r2, r2, r6
 8000f92:	6122      	str	r2, [r4, #16]
 8000f94:	f8cd a000 	str.w	sl, [sp]
 8000f98:	464b      	mov	r3, r9
 8000f9a:	aa03      	add	r2, sp, #12
 8000f9c:	4621      	mov	r1, r4
 8000f9e:	4640      	mov	r0, r8
 8000fa0:	f7ff fee6 	bl	8000d70 <_printf_common>
 8000fa4:	3001      	adds	r0, #1
 8000fa6:	d14a      	bne.n	800103e <_printf_i+0x1f2>
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	b004      	add	sp, #16
 8000fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb2:	6823      	ldr	r3, [r4, #0]
 8000fb4:	f043 0320 	orr.w	r3, r3, #32
 8000fb8:	6023      	str	r3, [r4, #0]
 8000fba:	4833      	ldr	r0, [pc, #204]	@ (8001088 <_printf_i+0x23c>)
 8000fbc:	2778      	movs	r7, #120	@ 0x78
 8000fbe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000fc2:	6823      	ldr	r3, [r4, #0]
 8000fc4:	6831      	ldr	r1, [r6, #0]
 8000fc6:	061f      	lsls	r7, r3, #24
 8000fc8:	f851 5b04 	ldr.w	r5, [r1], #4
 8000fcc:	d402      	bmi.n	8000fd4 <_printf_i+0x188>
 8000fce:	065f      	lsls	r7, r3, #25
 8000fd0:	bf48      	it	mi
 8000fd2:	b2ad      	uxthmi	r5, r5
 8000fd4:	6031      	str	r1, [r6, #0]
 8000fd6:	07d9      	lsls	r1, r3, #31
 8000fd8:	bf44      	itt	mi
 8000fda:	f043 0320 	orrmi.w	r3, r3, #32
 8000fde:	6023      	strmi	r3, [r4, #0]
 8000fe0:	b11d      	cbz	r5, 8000fea <_printf_i+0x19e>
 8000fe2:	2310      	movs	r3, #16
 8000fe4:	e7ac      	b.n	8000f40 <_printf_i+0xf4>
 8000fe6:	4827      	ldr	r0, [pc, #156]	@ (8001084 <_printf_i+0x238>)
 8000fe8:	e7e9      	b.n	8000fbe <_printf_i+0x172>
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	f023 0320 	bic.w	r3, r3, #32
 8000ff0:	6023      	str	r3, [r4, #0]
 8000ff2:	e7f6      	b.n	8000fe2 <_printf_i+0x196>
 8000ff4:	4616      	mov	r6, r2
 8000ff6:	e7bd      	b.n	8000f74 <_printf_i+0x128>
 8000ff8:	6833      	ldr	r3, [r6, #0]
 8000ffa:	6825      	ldr	r5, [r4, #0]
 8000ffc:	6961      	ldr	r1, [r4, #20]
 8000ffe:	1d18      	adds	r0, r3, #4
 8001000:	6030      	str	r0, [r6, #0]
 8001002:	062e      	lsls	r6, r5, #24
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	d501      	bpl.n	800100c <_printf_i+0x1c0>
 8001008:	6019      	str	r1, [r3, #0]
 800100a:	e002      	b.n	8001012 <_printf_i+0x1c6>
 800100c:	0668      	lsls	r0, r5, #25
 800100e:	d5fb      	bpl.n	8001008 <_printf_i+0x1bc>
 8001010:	8019      	strh	r1, [r3, #0]
 8001012:	2300      	movs	r3, #0
 8001014:	6123      	str	r3, [r4, #16]
 8001016:	4616      	mov	r6, r2
 8001018:	e7bc      	b.n	8000f94 <_printf_i+0x148>
 800101a:	6833      	ldr	r3, [r6, #0]
 800101c:	1d1a      	adds	r2, r3, #4
 800101e:	6032      	str	r2, [r6, #0]
 8001020:	681e      	ldr	r6, [r3, #0]
 8001022:	6862      	ldr	r2, [r4, #4]
 8001024:	2100      	movs	r1, #0
 8001026:	4630      	mov	r0, r6
 8001028:	f7ff f8da 	bl	80001e0 <memchr>
 800102c:	b108      	cbz	r0, 8001032 <_printf_i+0x1e6>
 800102e:	1b80      	subs	r0, r0, r6
 8001030:	6060      	str	r0, [r4, #4]
 8001032:	6863      	ldr	r3, [r4, #4]
 8001034:	6123      	str	r3, [r4, #16]
 8001036:	2300      	movs	r3, #0
 8001038:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800103c:	e7aa      	b.n	8000f94 <_printf_i+0x148>
 800103e:	6923      	ldr	r3, [r4, #16]
 8001040:	4632      	mov	r2, r6
 8001042:	4649      	mov	r1, r9
 8001044:	4640      	mov	r0, r8
 8001046:	47d0      	blx	sl
 8001048:	3001      	adds	r0, #1
 800104a:	d0ad      	beq.n	8000fa8 <_printf_i+0x15c>
 800104c:	6823      	ldr	r3, [r4, #0]
 800104e:	079b      	lsls	r3, r3, #30
 8001050:	d413      	bmi.n	800107a <_printf_i+0x22e>
 8001052:	68e0      	ldr	r0, [r4, #12]
 8001054:	9b03      	ldr	r3, [sp, #12]
 8001056:	4298      	cmp	r0, r3
 8001058:	bfb8      	it	lt
 800105a:	4618      	movlt	r0, r3
 800105c:	e7a6      	b.n	8000fac <_printf_i+0x160>
 800105e:	2301      	movs	r3, #1
 8001060:	4632      	mov	r2, r6
 8001062:	4649      	mov	r1, r9
 8001064:	4640      	mov	r0, r8
 8001066:	47d0      	blx	sl
 8001068:	3001      	adds	r0, #1
 800106a:	d09d      	beq.n	8000fa8 <_printf_i+0x15c>
 800106c:	3501      	adds	r5, #1
 800106e:	68e3      	ldr	r3, [r4, #12]
 8001070:	9903      	ldr	r1, [sp, #12]
 8001072:	1a5b      	subs	r3, r3, r1
 8001074:	42ab      	cmp	r3, r5
 8001076:	dcf2      	bgt.n	800105e <_printf_i+0x212>
 8001078:	e7eb      	b.n	8001052 <_printf_i+0x206>
 800107a:	2500      	movs	r5, #0
 800107c:	f104 0619 	add.w	r6, r4, #25
 8001080:	e7f5      	b.n	800106e <_printf_i+0x222>
 8001082:	bf00      	nop
 8001084:	080014ae 	.word	0x080014ae
 8001088:	080014bf 	.word	0x080014bf

0800108c <__sflush_r>:
 800108c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001092:	0716      	lsls	r6, r2, #28
 8001094:	4605      	mov	r5, r0
 8001096:	460c      	mov	r4, r1
 8001098:	d454      	bmi.n	8001144 <__sflush_r+0xb8>
 800109a:	684b      	ldr	r3, [r1, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	dc02      	bgt.n	80010a6 <__sflush_r+0x1a>
 80010a0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	dd48      	ble.n	8001138 <__sflush_r+0xac>
 80010a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80010a8:	2e00      	cmp	r6, #0
 80010aa:	d045      	beq.n	8001138 <__sflush_r+0xac>
 80010ac:	2300      	movs	r3, #0
 80010ae:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80010b2:	682f      	ldr	r7, [r5, #0]
 80010b4:	6a21      	ldr	r1, [r4, #32]
 80010b6:	602b      	str	r3, [r5, #0]
 80010b8:	d030      	beq.n	800111c <__sflush_r+0x90>
 80010ba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80010bc:	89a3      	ldrh	r3, [r4, #12]
 80010be:	0759      	lsls	r1, r3, #29
 80010c0:	d505      	bpl.n	80010ce <__sflush_r+0x42>
 80010c2:	6863      	ldr	r3, [r4, #4]
 80010c4:	1ad2      	subs	r2, r2, r3
 80010c6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80010c8:	b10b      	cbz	r3, 80010ce <__sflush_r+0x42>
 80010ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80010cc:	1ad2      	subs	r2, r2, r3
 80010ce:	2300      	movs	r3, #0
 80010d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80010d2:	6a21      	ldr	r1, [r4, #32]
 80010d4:	4628      	mov	r0, r5
 80010d6:	47b0      	blx	r6
 80010d8:	1c43      	adds	r3, r0, #1
 80010da:	89a3      	ldrh	r3, [r4, #12]
 80010dc:	d106      	bne.n	80010ec <__sflush_r+0x60>
 80010de:	6829      	ldr	r1, [r5, #0]
 80010e0:	291d      	cmp	r1, #29
 80010e2:	d82b      	bhi.n	800113c <__sflush_r+0xb0>
 80010e4:	4a28      	ldr	r2, [pc, #160]	@ (8001188 <__sflush_r+0xfc>)
 80010e6:	410a      	asrs	r2, r1
 80010e8:	07d6      	lsls	r6, r2, #31
 80010ea:	d427      	bmi.n	800113c <__sflush_r+0xb0>
 80010ec:	2200      	movs	r2, #0
 80010ee:	6062      	str	r2, [r4, #4]
 80010f0:	04d9      	lsls	r1, r3, #19
 80010f2:	6922      	ldr	r2, [r4, #16]
 80010f4:	6022      	str	r2, [r4, #0]
 80010f6:	d504      	bpl.n	8001102 <__sflush_r+0x76>
 80010f8:	1c42      	adds	r2, r0, #1
 80010fa:	d101      	bne.n	8001100 <__sflush_r+0x74>
 80010fc:	682b      	ldr	r3, [r5, #0]
 80010fe:	b903      	cbnz	r3, 8001102 <__sflush_r+0x76>
 8001100:	6560      	str	r0, [r4, #84]	@ 0x54
 8001102:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001104:	602f      	str	r7, [r5, #0]
 8001106:	b1b9      	cbz	r1, 8001138 <__sflush_r+0xac>
 8001108:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800110c:	4299      	cmp	r1, r3
 800110e:	d002      	beq.n	8001116 <__sflush_r+0x8a>
 8001110:	4628      	mov	r0, r5
 8001112:	f7ff fbf5 	bl	8000900 <_free_r>
 8001116:	2300      	movs	r3, #0
 8001118:	6363      	str	r3, [r4, #52]	@ 0x34
 800111a:	e00d      	b.n	8001138 <__sflush_r+0xac>
 800111c:	2301      	movs	r3, #1
 800111e:	4628      	mov	r0, r5
 8001120:	47b0      	blx	r6
 8001122:	4602      	mov	r2, r0
 8001124:	1c50      	adds	r0, r2, #1
 8001126:	d1c9      	bne.n	80010bc <__sflush_r+0x30>
 8001128:	682b      	ldr	r3, [r5, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d0c6      	beq.n	80010bc <__sflush_r+0x30>
 800112e:	2b1d      	cmp	r3, #29
 8001130:	d001      	beq.n	8001136 <__sflush_r+0xaa>
 8001132:	2b16      	cmp	r3, #22
 8001134:	d11d      	bne.n	8001172 <__sflush_r+0xe6>
 8001136:	602f      	str	r7, [r5, #0]
 8001138:	2000      	movs	r0, #0
 800113a:	e021      	b.n	8001180 <__sflush_r+0xf4>
 800113c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001140:	b21b      	sxth	r3, r3
 8001142:	e01a      	b.n	800117a <__sflush_r+0xee>
 8001144:	690f      	ldr	r7, [r1, #16]
 8001146:	2f00      	cmp	r7, #0
 8001148:	d0f6      	beq.n	8001138 <__sflush_r+0xac>
 800114a:	0793      	lsls	r3, r2, #30
 800114c:	680e      	ldr	r6, [r1, #0]
 800114e:	bf08      	it	eq
 8001150:	694b      	ldreq	r3, [r1, #20]
 8001152:	600f      	str	r7, [r1, #0]
 8001154:	bf18      	it	ne
 8001156:	2300      	movne	r3, #0
 8001158:	1bf6      	subs	r6, r6, r7
 800115a:	608b      	str	r3, [r1, #8]
 800115c:	2e00      	cmp	r6, #0
 800115e:	ddeb      	ble.n	8001138 <__sflush_r+0xac>
 8001160:	6a21      	ldr	r1, [r4, #32]
 8001162:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001166:	4633      	mov	r3, r6
 8001168:	463a      	mov	r2, r7
 800116a:	4628      	mov	r0, r5
 800116c:	47e0      	blx	ip
 800116e:	2800      	cmp	r0, #0
 8001170:	dc07      	bgt.n	8001182 <__sflush_r+0xf6>
 8001172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800117a:	81a3      	strh	r3, [r4, #12]
 800117c:	f04f 30ff 	mov.w	r0, #4294967295
 8001180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001182:	4407      	add	r7, r0
 8001184:	1a36      	subs	r6, r6, r0
 8001186:	e7e9      	b.n	800115c <__sflush_r+0xd0>
 8001188:	dfbffffe 	.word	0xdfbffffe

0800118c <_fflush_r>:
 800118c:	b538      	push	{r3, r4, r5, lr}
 800118e:	690b      	ldr	r3, [r1, #16]
 8001190:	4605      	mov	r5, r0
 8001192:	460c      	mov	r4, r1
 8001194:	b913      	cbnz	r3, 800119c <_fflush_r+0x10>
 8001196:	2500      	movs	r5, #0
 8001198:	4628      	mov	r0, r5
 800119a:	bd38      	pop	{r3, r4, r5, pc}
 800119c:	b118      	cbz	r0, 80011a6 <_fflush_r+0x1a>
 800119e:	6a03      	ldr	r3, [r0, #32]
 80011a0:	b90b      	cbnz	r3, 80011a6 <_fflush_r+0x1a>
 80011a2:	f7ff faa5 	bl	80006f0 <__sinit>
 80011a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f3      	beq.n	8001196 <_fflush_r+0xa>
 80011ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80011b0:	07d0      	lsls	r0, r2, #31
 80011b2:	d404      	bmi.n	80011be <_fflush_r+0x32>
 80011b4:	0599      	lsls	r1, r3, #22
 80011b6:	d402      	bmi.n	80011be <_fflush_r+0x32>
 80011b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80011ba:	f7ff fb9e 	bl	80008fa <__retarget_lock_acquire_recursive>
 80011be:	4628      	mov	r0, r5
 80011c0:	4621      	mov	r1, r4
 80011c2:	f7ff ff63 	bl	800108c <__sflush_r>
 80011c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80011c8:	07da      	lsls	r2, r3, #31
 80011ca:	4605      	mov	r5, r0
 80011cc:	d4e4      	bmi.n	8001198 <_fflush_r+0xc>
 80011ce:	89a3      	ldrh	r3, [r4, #12]
 80011d0:	059b      	lsls	r3, r3, #22
 80011d2:	d4e1      	bmi.n	8001198 <_fflush_r+0xc>
 80011d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80011d6:	f7ff fb91 	bl	80008fc <__retarget_lock_release_recursive>
 80011da:	e7dd      	b.n	8001198 <_fflush_r+0xc>

080011dc <__swbuf_r>:
 80011dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011de:	460e      	mov	r6, r1
 80011e0:	4614      	mov	r4, r2
 80011e2:	4605      	mov	r5, r0
 80011e4:	b118      	cbz	r0, 80011ee <__swbuf_r+0x12>
 80011e6:	6a03      	ldr	r3, [r0, #32]
 80011e8:	b90b      	cbnz	r3, 80011ee <__swbuf_r+0x12>
 80011ea:	f7ff fa81 	bl	80006f0 <__sinit>
 80011ee:	69a3      	ldr	r3, [r4, #24]
 80011f0:	60a3      	str	r3, [r4, #8]
 80011f2:	89a3      	ldrh	r3, [r4, #12]
 80011f4:	071a      	lsls	r2, r3, #28
 80011f6:	d501      	bpl.n	80011fc <__swbuf_r+0x20>
 80011f8:	6923      	ldr	r3, [r4, #16]
 80011fa:	b943      	cbnz	r3, 800120e <__swbuf_r+0x32>
 80011fc:	4621      	mov	r1, r4
 80011fe:	4628      	mov	r0, r5
 8001200:	f000 f82a 	bl	8001258 <__swsetup_r>
 8001204:	b118      	cbz	r0, 800120e <__swbuf_r+0x32>
 8001206:	f04f 37ff 	mov.w	r7, #4294967295
 800120a:	4638      	mov	r0, r7
 800120c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800120e:	6823      	ldr	r3, [r4, #0]
 8001210:	6922      	ldr	r2, [r4, #16]
 8001212:	1a98      	subs	r0, r3, r2
 8001214:	6963      	ldr	r3, [r4, #20]
 8001216:	b2f6      	uxtb	r6, r6
 8001218:	4283      	cmp	r3, r0
 800121a:	4637      	mov	r7, r6
 800121c:	dc05      	bgt.n	800122a <__swbuf_r+0x4e>
 800121e:	4621      	mov	r1, r4
 8001220:	4628      	mov	r0, r5
 8001222:	f7ff ffb3 	bl	800118c <_fflush_r>
 8001226:	2800      	cmp	r0, #0
 8001228:	d1ed      	bne.n	8001206 <__swbuf_r+0x2a>
 800122a:	68a3      	ldr	r3, [r4, #8]
 800122c:	3b01      	subs	r3, #1
 800122e:	60a3      	str	r3, [r4, #8]
 8001230:	6823      	ldr	r3, [r4, #0]
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	6022      	str	r2, [r4, #0]
 8001236:	701e      	strb	r6, [r3, #0]
 8001238:	6962      	ldr	r2, [r4, #20]
 800123a:	1c43      	adds	r3, r0, #1
 800123c:	429a      	cmp	r2, r3
 800123e:	d004      	beq.n	800124a <__swbuf_r+0x6e>
 8001240:	89a3      	ldrh	r3, [r4, #12]
 8001242:	07db      	lsls	r3, r3, #31
 8001244:	d5e1      	bpl.n	800120a <__swbuf_r+0x2e>
 8001246:	2e0a      	cmp	r6, #10
 8001248:	d1df      	bne.n	800120a <__swbuf_r+0x2e>
 800124a:	4621      	mov	r1, r4
 800124c:	4628      	mov	r0, r5
 800124e:	f7ff ff9d 	bl	800118c <_fflush_r>
 8001252:	2800      	cmp	r0, #0
 8001254:	d0d9      	beq.n	800120a <__swbuf_r+0x2e>
 8001256:	e7d6      	b.n	8001206 <__swbuf_r+0x2a>

08001258 <__swsetup_r>:
 8001258:	b538      	push	{r3, r4, r5, lr}
 800125a:	4b29      	ldr	r3, [pc, #164]	@ (8001300 <__swsetup_r+0xa8>)
 800125c:	4605      	mov	r5, r0
 800125e:	6818      	ldr	r0, [r3, #0]
 8001260:	460c      	mov	r4, r1
 8001262:	b118      	cbz	r0, 800126c <__swsetup_r+0x14>
 8001264:	6a03      	ldr	r3, [r0, #32]
 8001266:	b90b      	cbnz	r3, 800126c <__swsetup_r+0x14>
 8001268:	f7ff fa42 	bl	80006f0 <__sinit>
 800126c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001270:	0719      	lsls	r1, r3, #28
 8001272:	d422      	bmi.n	80012ba <__swsetup_r+0x62>
 8001274:	06da      	lsls	r2, r3, #27
 8001276:	d407      	bmi.n	8001288 <__swsetup_r+0x30>
 8001278:	2209      	movs	r2, #9
 800127a:	602a      	str	r2, [r5, #0]
 800127c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001280:	81a3      	strh	r3, [r4, #12]
 8001282:	f04f 30ff 	mov.w	r0, #4294967295
 8001286:	e033      	b.n	80012f0 <__swsetup_r+0x98>
 8001288:	0758      	lsls	r0, r3, #29
 800128a:	d512      	bpl.n	80012b2 <__swsetup_r+0x5a>
 800128c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800128e:	b141      	cbz	r1, 80012a2 <__swsetup_r+0x4a>
 8001290:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001294:	4299      	cmp	r1, r3
 8001296:	d002      	beq.n	800129e <__swsetup_r+0x46>
 8001298:	4628      	mov	r0, r5
 800129a:	f7ff fb31 	bl	8000900 <_free_r>
 800129e:	2300      	movs	r3, #0
 80012a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80012a2:	89a3      	ldrh	r3, [r4, #12]
 80012a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80012a8:	81a3      	strh	r3, [r4, #12]
 80012aa:	2300      	movs	r3, #0
 80012ac:	6063      	str	r3, [r4, #4]
 80012ae:	6923      	ldr	r3, [r4, #16]
 80012b0:	6023      	str	r3, [r4, #0]
 80012b2:	89a3      	ldrh	r3, [r4, #12]
 80012b4:	f043 0308 	orr.w	r3, r3, #8
 80012b8:	81a3      	strh	r3, [r4, #12]
 80012ba:	6923      	ldr	r3, [r4, #16]
 80012bc:	b94b      	cbnz	r3, 80012d2 <__swsetup_r+0x7a>
 80012be:	89a3      	ldrh	r3, [r4, #12]
 80012c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80012c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012c8:	d003      	beq.n	80012d2 <__swsetup_r+0x7a>
 80012ca:	4621      	mov	r1, r4
 80012cc:	4628      	mov	r0, r5
 80012ce:	f000 f84f 	bl	8001370 <__smakebuf_r>
 80012d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012d6:	f013 0201 	ands.w	r2, r3, #1
 80012da:	d00a      	beq.n	80012f2 <__swsetup_r+0x9a>
 80012dc:	2200      	movs	r2, #0
 80012de:	60a2      	str	r2, [r4, #8]
 80012e0:	6962      	ldr	r2, [r4, #20]
 80012e2:	4252      	negs	r2, r2
 80012e4:	61a2      	str	r2, [r4, #24]
 80012e6:	6922      	ldr	r2, [r4, #16]
 80012e8:	b942      	cbnz	r2, 80012fc <__swsetup_r+0xa4>
 80012ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80012ee:	d1c5      	bne.n	800127c <__swsetup_r+0x24>
 80012f0:	bd38      	pop	{r3, r4, r5, pc}
 80012f2:	0799      	lsls	r1, r3, #30
 80012f4:	bf58      	it	pl
 80012f6:	6962      	ldrpl	r2, [r4, #20]
 80012f8:	60a2      	str	r2, [r4, #8]
 80012fa:	e7f4      	b.n	80012e6 <__swsetup_r+0x8e>
 80012fc:	2000      	movs	r0, #0
 80012fe:	e7f7      	b.n	80012f0 <__swsetup_r+0x98>
 8001300:	2000000c 	.word	0x2000000c

08001304 <_sbrk_r>:
 8001304:	b538      	push	{r3, r4, r5, lr}
 8001306:	4d06      	ldr	r5, [pc, #24]	@ (8001320 <_sbrk_r+0x1c>)
 8001308:	2300      	movs	r3, #0
 800130a:	4604      	mov	r4, r0
 800130c:	4608      	mov	r0, r1
 800130e:	602b      	str	r3, [r5, #0]
 8001310:	f7ff f902 	bl	8000518 <_sbrk>
 8001314:	1c43      	adds	r3, r0, #1
 8001316:	d102      	bne.n	800131e <_sbrk_r+0x1a>
 8001318:	682b      	ldr	r3, [r5, #0]
 800131a:	b103      	cbz	r3, 800131e <_sbrk_r+0x1a>
 800131c:	6023      	str	r3, [r4, #0]
 800131e:	bd38      	pop	{r3, r4, r5, pc}
 8001320:	200001b8 	.word	0x200001b8

08001324 <__swhatbuf_r>:
 8001324:	b570      	push	{r4, r5, r6, lr}
 8001326:	460c      	mov	r4, r1
 8001328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800132c:	2900      	cmp	r1, #0
 800132e:	b096      	sub	sp, #88	@ 0x58
 8001330:	4615      	mov	r5, r2
 8001332:	461e      	mov	r6, r3
 8001334:	da0d      	bge.n	8001352 <__swhatbuf_r+0x2e>
 8001336:	89a3      	ldrh	r3, [r4, #12]
 8001338:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800133c:	f04f 0100 	mov.w	r1, #0
 8001340:	bf14      	ite	ne
 8001342:	2340      	movne	r3, #64	@ 0x40
 8001344:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001348:	2000      	movs	r0, #0
 800134a:	6031      	str	r1, [r6, #0]
 800134c:	602b      	str	r3, [r5, #0]
 800134e:	b016      	add	sp, #88	@ 0x58
 8001350:	bd70      	pop	{r4, r5, r6, pc}
 8001352:	466a      	mov	r2, sp
 8001354:	f000 f848 	bl	80013e8 <_fstat_r>
 8001358:	2800      	cmp	r0, #0
 800135a:	dbec      	blt.n	8001336 <__swhatbuf_r+0x12>
 800135c:	9901      	ldr	r1, [sp, #4]
 800135e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001362:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001366:	4259      	negs	r1, r3
 8001368:	4159      	adcs	r1, r3
 800136a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800136e:	e7eb      	b.n	8001348 <__swhatbuf_r+0x24>

08001370 <__smakebuf_r>:
 8001370:	898b      	ldrh	r3, [r1, #12]
 8001372:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001374:	079d      	lsls	r5, r3, #30
 8001376:	4606      	mov	r6, r0
 8001378:	460c      	mov	r4, r1
 800137a:	d507      	bpl.n	800138c <__smakebuf_r+0x1c>
 800137c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001380:	6023      	str	r3, [r4, #0]
 8001382:	6123      	str	r3, [r4, #16]
 8001384:	2301      	movs	r3, #1
 8001386:	6163      	str	r3, [r4, #20]
 8001388:	b003      	add	sp, #12
 800138a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800138c:	ab01      	add	r3, sp, #4
 800138e:	466a      	mov	r2, sp
 8001390:	f7ff ffc8 	bl	8001324 <__swhatbuf_r>
 8001394:	9f00      	ldr	r7, [sp, #0]
 8001396:	4605      	mov	r5, r0
 8001398:	4639      	mov	r1, r7
 800139a:	4630      	mov	r0, r6
 800139c:	f7ff fb1c 	bl	80009d8 <_malloc_r>
 80013a0:	b948      	cbnz	r0, 80013b6 <__smakebuf_r+0x46>
 80013a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013a6:	059a      	lsls	r2, r3, #22
 80013a8:	d4ee      	bmi.n	8001388 <__smakebuf_r+0x18>
 80013aa:	f023 0303 	bic.w	r3, r3, #3
 80013ae:	f043 0302 	orr.w	r3, r3, #2
 80013b2:	81a3      	strh	r3, [r4, #12]
 80013b4:	e7e2      	b.n	800137c <__smakebuf_r+0xc>
 80013b6:	89a3      	ldrh	r3, [r4, #12]
 80013b8:	6020      	str	r0, [r4, #0]
 80013ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013be:	81a3      	strh	r3, [r4, #12]
 80013c0:	9b01      	ldr	r3, [sp, #4]
 80013c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80013c6:	b15b      	cbz	r3, 80013e0 <__smakebuf_r+0x70>
 80013c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80013cc:	4630      	mov	r0, r6
 80013ce:	f000 f81d 	bl	800140c <_isatty_r>
 80013d2:	b128      	cbz	r0, 80013e0 <__smakebuf_r+0x70>
 80013d4:	89a3      	ldrh	r3, [r4, #12]
 80013d6:	f023 0303 	bic.w	r3, r3, #3
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	81a3      	strh	r3, [r4, #12]
 80013e0:	89a3      	ldrh	r3, [r4, #12]
 80013e2:	431d      	orrs	r5, r3
 80013e4:	81a5      	strh	r5, [r4, #12]
 80013e6:	e7cf      	b.n	8001388 <__smakebuf_r+0x18>

080013e8 <_fstat_r>:
 80013e8:	b538      	push	{r3, r4, r5, lr}
 80013ea:	4d07      	ldr	r5, [pc, #28]	@ (8001408 <_fstat_r+0x20>)
 80013ec:	2300      	movs	r3, #0
 80013ee:	4604      	mov	r4, r0
 80013f0:	4608      	mov	r0, r1
 80013f2:	4611      	mov	r1, r2
 80013f4:	602b      	str	r3, [r5, #0]
 80013f6:	f7ff f869 	bl	80004cc <_fstat>
 80013fa:	1c43      	adds	r3, r0, #1
 80013fc:	d102      	bne.n	8001404 <_fstat_r+0x1c>
 80013fe:	682b      	ldr	r3, [r5, #0]
 8001400:	b103      	cbz	r3, 8001404 <_fstat_r+0x1c>
 8001402:	6023      	str	r3, [r4, #0]
 8001404:	bd38      	pop	{r3, r4, r5, pc}
 8001406:	bf00      	nop
 8001408:	200001b8 	.word	0x200001b8

0800140c <_isatty_r>:
 800140c:	b538      	push	{r3, r4, r5, lr}
 800140e:	4d06      	ldr	r5, [pc, #24]	@ (8001428 <_isatty_r+0x1c>)
 8001410:	2300      	movs	r3, #0
 8001412:	4604      	mov	r4, r0
 8001414:	4608      	mov	r0, r1
 8001416:	602b      	str	r3, [r5, #0]
 8001418:	f7ff f867 	bl	80004ea <_isatty>
 800141c:	1c43      	adds	r3, r0, #1
 800141e:	d102      	bne.n	8001426 <_isatty_r+0x1a>
 8001420:	682b      	ldr	r3, [r5, #0]
 8001422:	b103      	cbz	r3, 8001426 <_isatty_r+0x1a>
 8001424:	6023      	str	r3, [r4, #0]
 8001426:	bd38      	pop	{r3, r4, r5, pc}
 8001428:	200001b8 	.word	0x200001b8

0800142c <_init>:
 800142c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800142e:	bf00      	nop
 8001430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001432:	bc08      	pop	{r3}
 8001434:	469e      	mov	lr, r3
 8001436:	4770      	bx	lr

08001438 <_fini>:
 8001438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800143a:	bf00      	nop
 800143c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800143e:	bc08      	pop	{r3}
 8001440:	469e      	mov	lr, r3
 8001442:	4770      	bx	lr
